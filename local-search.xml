<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Codeforces Round</title>
    <link href="/2021/04/16/Codeforces-Round-714-Div-2-Editorial-2021-04-12/"/>
    <url>/2021/04/16/Codeforces-Round-714-Div-2-Editorial-2021-04-12/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://codeforces.com/contest/1513">#714(div.2)</a>.<br>开始记录cf的比赛，这是第一场。还不熟悉md格式，凑合写。<br>由于现在菜的很，div123只能过A，不过为了养成好习惯，还是写一 写。<del>（一题也行啊）</del> </p><h1 id="A-Array-and-Peaks（思维-构造）"><a href="#A-Array-and-Peaks（思维-构造）" class="headerlink" title="A. Array and Peaks（思维+构造）"></a>A. Array and Peaks（思维+构造）</h1><p><a href="https://codeforces.com/contest/1513/problem/A">https://codeforces.com/contest/1513/problem/A</a><br>链接: <a href="https://codeforces.com/contest/1513/problem/A">Array and Peaks</a>.<br>题意：给出整数n和k，将数字1~n排除某个序列使之出现k个峰。其中峰指该值比左右值都大。注意峰不能在首尾即前后必须有数字。<br>很简单的思维题。<br>官方题解：<br><img src="https://img-blog.csdnimg.cn/20210412111625366.png" alt="在这里插入图片描述"><br>显然峰值先考虑大到小，每隔一位就放入一个峰值然后将其减1作为下一个峰值。那么当峰值数大于总数的一半即k*2&gt;n将有峰值放不下也就是无解。<br>可以先判断有误解，再输出答案。<br>我当时比赛的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br> <br>#include&lt;iostream&gt;<br>#include&lt;stdio.h&gt;<br>#include&lt;cstring&gt;<br>#include&lt;string&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;vector&gt;<br>#include&lt;math.h&gt;<br>#include&lt;map&gt;<br>#include&lt;sstream&gt;<br> <br>#define STD using namespace std;<br>#define ll long long<br>#define db double<br>#define ldb long double<br>#define IOS std::ios::sync_with_stdio(<span class="hljs-literal">false</span>),<span class="hljs-attr">std</span>::cin.tie(<span class="hljs-number">0</span>),<span class="hljs-attr">std</span>::cout.tie(<span class="hljs-number">0</span>);<br>#define MAX <span class="hljs-number">88888888</span><br>#define INF <span class="hljs-number">0x3f</span><br>#define r0 <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>#define SYP system(<span class="hljs-string">&quot;pause&quot;</span>);<br>#define endl <span class="hljs-string">&#x27;\n&#x27;</span><br> <br>STD<br><span class="hljs-keyword">const</span> int maxn=<span class="hljs-number">105</span>;<br>int re[maxn];<br>int main()<br>&#123;<br>    <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">100</span>;i++)re[i]=i;<br>    int t;cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        int n,k;<br>        cin&gt;&gt;n&gt;&gt;k;<br>        <span class="hljs-keyword">if</span>(k*<span class="hljs-number">2</span>&gt;=n)&#123;cout&lt;&lt;-<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<span class="hljs-keyword">continue</span>;&#125;<br>        int a=<span class="hljs-number">1</span>,b=n-k+<span class="hljs-number">1</span>;<br>        bool flag=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>||b&gt;n)cout&lt;&lt;a++&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>&amp;&amp;b&lt;=n)cout&lt;&lt;b++&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>        cout&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//SYP</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="B-AND-Sequences（思维-构造-排列组合-AND-amp-与运算）"><a href="#B-AND-Sequences（思维-构造-排列组合-AND-amp-与运算）" class="headerlink" title="B.AND Sequences（思维+构造+排列组合+AND&amp;与运算）"></a>B.AND Sequences（思维+构造+排列组合+AND&amp;与运算）</h1><p>链接: <a href="https://codeforces.com/contest/1513/problem/B">AND Sequences</a>.<br>题意：输入n和n个整数。将n个整数排列，求good permutations的总数对1e9+7取模。<br>good permutations定义为：<img src="https://img-blog.csdnimg.cn/20210412112529758.png" alt="在这里插入图片描述"><br>这题比赛的时候想法是记录出现两次以上的数字个数和出现次数，若不存在输出0，否则取两个相同数字作为首尾其它位置排列组合。理由是首尾相同之后一定满足good permutations。<br>最终结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs javascript">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br> <br>#include&lt;iostream&gt;<br>#include&lt;stdio.h&gt;<br>#include&lt;cstring&gt;<br>#include&lt;string&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;vector&gt;<br>#include&lt;math.h&gt;<br>#include&lt;map&gt;<br>#include&lt;sstream&gt;<br> <br>#define STD using namespace std;<br>#define ll long long<br>#define db double<br>#define ldb long double<br>#define IOS std::ios::sync_with_stdio(<span class="hljs-literal">false</span>),<span class="hljs-attr">std</span>::cin.tie(<span class="hljs-number">0</span>),<span class="hljs-attr">std</span>::cout.tie(<span class="hljs-number">0</span>);<br>#define MAX <span class="hljs-number">88888888</span><br>#define INF <span class="hljs-number">0x3f</span><br>#define r0 <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>#define SYP system(<span class="hljs-string">&quot;pause&quot;</span>);<br>#define endl <span class="hljs-string">&#x27;\n&#x27;</span><br> <br>STD<br><span class="hljs-keyword">const</span> int maxn=<span class="hljs-number">2e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> int mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br>int a[maxn];<br>ll pre[maxn];<br>int yes[maxn];<br><span class="hljs-keyword">void</span> init()<br>&#123;<br>    pre[<span class="hljs-number">1</span>]=pre[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">2</span>;i&lt;maxn;i++)&#123;<br>        pre[i]=((i%mod)*(pre[i-<span class="hljs-number">1</span>]%mod))%mod;<br>    &#125;<br>&#125;<br>int main()<br>&#123;<br>    init();<br>    int t;cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        int n;cin&gt;&gt;n;<br>        memset(yes,<span class="hljs-number">0</span>,sizeof yes);<br>        vector&lt;int&gt;ans;<br>        int ma=<span class="hljs-number">0</span>;<br>        int can=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            cin&gt;&gt;a[i];<br>            yes[a[i]]++;<br>            <span class="hljs-keyword">if</span>(yes[a[i]]==<span class="hljs-number">2</span>)ans.push_back(a[i]),can++;<br>        &#125;<br> <br>        <span class="hljs-comment">//cout&lt;&lt;&quot;debug:&quot;&lt;&lt;can&lt;&lt;&#x27;\n&#x27;;</span><br>        <span class="hljs-comment">//cout&lt;&lt;&quot;debug:&quot;&lt;&lt;pre[1]&lt;&lt;&#x27; &#x27;&lt;&lt;pre[2]&lt;&lt;&#x27; &#x27;&lt;&lt;pre[3]&lt;&lt;&#x27;\n&#x27;;</span><br> <br>        <span class="hljs-keyword">if</span>(can==<span class="hljs-number">0</span>)&#123;cout&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<span class="hljs-keyword">continue</span>;&#125;<br>        ll res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>;i&lt;can;i++)&#123;<br>            ll p=(yes[ans[i]]%mod*(yes[ans[i]]-<span class="hljs-number">1</span>)%mod)%mod*pre[n-<span class="hljs-number">2</span>]%mod;<br>            <span class="hljs-comment">//cout&lt;&lt;&quot;debug:&quot;&lt;&lt;p&lt;&lt;&#x27;\n&#x27;;</span><br>            res+=p;<br>            res%=mod;<br>        &#125;<br>        cout&lt;&lt;res&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//SYP</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果是wa了，只能过样例点。<br>分析一下为什么wa了：这里很显然a[1]=a[n]是一个<strong>必要条件</strong>，但事实上它<strong>并不是一个充分条件</strong>。因为除了a[1]=a[n]外还要满足a[1]&amp;x=a[n]&amp;x，x=a[2]&amp;a[3]<del>a[n-1]。<br>来看看官方题解：<br><img src="https://img-blog.csdnimg.cn/20210412113020714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MTg2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>首先解释一下官方题解的意思。<br>pref(i)=a[1]&amp;a[2]&amp;</del>a[i]，<br>suf(i)=a[i]&amp;a[i+1]&amp;<del>a[n]，<br>我们知道几个数相&amp;只会使结果越来越小，所以pref(2)&lt;=pref(1)=suf(2)&lt;=suf(3)，又由题有pref(1)=suf(3)，所以得出：a[1]=_pref(2)=_suf(3)。<br>从而对1&lt;=i&lt;=n有pref(i)=a[i]&amp;&amp;suf[i]=a[1]。<br>我这里做出自己的另一种理解：<br>有上述可知，若将中间看作整体，有a[1]&amp;x=a[n]，a[1]=x&amp;a[n]，a[1]=a[n]，那么我们可以再把后两项或前两项看作整体，成为一个n-1项的序列，且我们同样可以得出以上结论，即首尾相等且等于首尾分别与中间&amp;的结果，当我们继续往下推可以得到：a[1]=a[1]&amp;a[2]=a[2]&amp;F(a[3]&amp;</del>a[n])，<br>把左右两边&amp;a[1]得到a[1]&amp;a[1]=a[1]&amp;a[2]&amp;F(a[3]&amp;<del>a[n])，<br>那么a[1]=a[1]&amp;</del>a[n]的结论就得出来了。<br>也就是说要找的首尾应该是相等的且等于所有数&amp;的结果。<br>那么下面就可以来实现了：<br>首先mp记录每个数出现次数，p=a[1]&amp;a[2]~~a[n]，mul=(n-2)!。<br>其中p为放置在首尾的数，mul为中间数字的全排列。<br>若mp[p]&lt;=2说明没有合题意能放在首尾的数即无解输出0，<br>否则 ans=mp[p]* （mp[p]-1）* mul。<br>前两项相乘表示所有合适的数选出来两个排列在首尾的方案数和，即c(2,cnt)。<br>记得边乘边取模。<br>赛后补题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs javascript">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br><br>#include&lt;iostream&gt;<br>#include&lt;stdio.h&gt;<br>#include&lt;cstring&gt;<br>#include&lt;string&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;vector&gt;<br>#include&lt;math.h&gt;<br>#include&lt;map&gt;<br>#include&lt;sstream&gt;<br><br>#define STD using namespace std;<br>#define ll long long<br>#define db double<br>#define ldb long double<br>#define IOS std::ios::sync_with_stdio(<span class="hljs-literal">false</span>),<span class="hljs-attr">std</span>::cin.tie(<span class="hljs-number">0</span>),<span class="hljs-attr">std</span>::cout.tie(<span class="hljs-number">0</span>);<br>#define MAX <span class="hljs-number">88888888</span><br>#define INF <span class="hljs-number">0x3f</span><br>#define r0 <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>#define SYP system(<span class="hljs-string">&quot;pause&quot;</span>);<br>#define endl <span class="hljs-string">&#x27;\n&#x27;</span><br><br>STD<br><span class="hljs-keyword">const</span> int maxn=<span class="hljs-number">2e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> int mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br>ll a[maxn];<br>map&lt;ll,ll&gt;mp;<br>int main()<br>&#123;<br>    int t;cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        mp.clear();<br>        int n;cin&gt;&gt;n;<br>        ll p,mul=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            cin&gt;&gt;a[i];<br>            mp[a[i]]++;<br>            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)p=a[i];<br>            <span class="hljs-keyword">else</span> p&amp;=a[i];<br>            <span class="hljs-keyword">if</span>(i&lt;=n-<span class="hljs-number">2</span>)mul=(mul*i)%mod;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(mp[p]&gt;=<span class="hljs-number">2</span>)&#123;<br>            ll ans=(mp[p]*(mp[p]-<span class="hljs-number">1</span>))%mod;<br>            cout&lt;&lt;ans*mul%mod&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//SYP</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C-Add-One（dp-矩阵）"><a href="#C-Add-One（dp-矩阵）" class="headerlink" title="C.Add One（dp+矩阵）"></a>C.Add One（dp+矩阵）</h1><p><a href="https://codeforces.com/contest/1513/problem/C">https://codeforces.com/contest/1513/problem/C</a><br>链接：<a href="https://codeforces.com/contest/1513/problem/C">Add One</a><br>题意：t组样例，每组给出两个整数n，m。对n操作m次输出最终n的长度对1e9+7取模。<br>操作指：n每一个十进制位的数字加1。eg：1912–&gt;21023。<br>这题比赛时来不及想，不过大概率也做不出来。<br>还是先上官方题解：<br><img src="https://img-blog.csdnimg.cn/20210412125428215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MTg2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>考虑一位数如何加1会变成两位数。<br>对于n=10，操作k次，设dp[i]==操作i次后n长度：<br>0&lt;=k&lt;=8：dp[k]==2;<br>k=9:   dp[k]==3;<br>k&gt;=10:  dp[k]=dp[k-9]+dp[k-10]<br>那么我们可以先预处理一下。<br>最后结果就是：<br><img src="https://img-blog.csdnimg.cn/20210412130303495.png" alt="在这里插入图片描述"><br>也就是遍历每一位数设为x，若m+x&lt;10 ans+=1；否则ans+=dp[m+x-10]。<br>记得取模。数据很多所以得IOS关同步。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br><br>#include&lt;iostream&gt;<br>#include&lt;stdio.h&gt;<br>#include&lt;cstring&gt;<br>#include&lt;string&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;vector&gt;<br>#include&lt;math.h&gt;<br>#include&lt;map&gt;<br>#include&lt;sstream&gt;<br><br>#define STD using namespace std;<br>#define ll long long<br>#define db double<br>#define ldb long double<br>#define IOS std::ios::sync_with_stdio(<span class="hljs-literal">false</span>),<span class="hljs-attr">std</span>::cin.tie(<span class="hljs-number">0</span>),<span class="hljs-attr">std</span>::cout.tie(<span class="hljs-number">0</span>);<br>#define MAX <span class="hljs-number">88888888</span><br>#define INF <span class="hljs-number">0x3f</span><br>#define r0 <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>#define SYP system(<span class="hljs-string">&quot;pause&quot;</span>);<br>#define endl <span class="hljs-string">&#x27;\n&#x27;</span><br><br>STD<br><span class="hljs-keyword">const</span> int maxn=<span class="hljs-number">2e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> int mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br>int dp[maxn];<br>int main()<br>&#123;<br>    IOS<br>    <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9</span>;i++)dp[i]=<span class="hljs-number">2</span>;<br>    dp[<span class="hljs-number">9</span>]=<span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">10</span>;i&lt;maxn;i++)dp[i]=(dp[i-<span class="hljs-number">9</span>]+dp[i-<span class="hljs-number">10</span>])%mod;<br>    int t;cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        int n,m;<br>        cin&gt;&gt;n&gt;&gt;m;<br>        int ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(n)&#123;<br>            int x=n%<span class="hljs-number">10</span>;<br>            ans+=((x+m&lt;<span class="hljs-number">10</span>)?<span class="hljs-number">1</span>:dp[x+m-<span class="hljs-number">10</span>]);<br>            ans%=mod;n/=<span class="hljs-number">10</span>;<br>        &#125;<br>        cout&lt;&lt;ans&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    SYP<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么就到这了，再往下DEF不会了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>codeforces ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何使用Hexo搭建一个自己的静态博客</title>
    <link href="/2021/04/14/How-to-creat-a-blog-using-hexo/"/>
    <url>/2021/04/14/How-to-creat-a-blog-using-hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="如何使用Hexo搭建一个静态博客"><a href="#如何使用Hexo搭建一个静态博客" class="headerlink" title="如何使用Hexo搭建一个静态博客"></a>如何使用Hexo搭建一个静态博客</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>hexo官网在这里：<a href="https://hexo.io/zh-cn/">hexo</a></p><p>hexo是一款简洁快速的博客框架，可以使用Makedown（或其他渲染引擎）解析文章。</p><p>大一下，为了记录技术文章和刷题补题记录（还有其它乱七八糟的东西），我出生了搭建博客的想法，由于对各大博客框架不了解，选择了一位本校师兄推荐的hexo，在这里记录一下博客搭建的过程和遇到的一些问题。写此博客时参考了其它博客和视频，将会在文章末尾列出。</p><p>本博客使用<strong>hexo框架</strong>，通过Git Pages服务部署在了<strong>github/gitee</strong>上，本人使用的是windows系统，不同系统差异应该也不大。（并不清楚）</p><h2 id="安装前提："><a href="#安装前提：" class="headerlink" title="安装前提："></a>安装前提：</h2><p>需要以下两款程序：</p><p><a href="https://nodejs.org/en/">Node.js</a></p><p><a href="http://git-scm.com/">Git</a></p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a><a href="http://git-scm.com/">Git</a></h3><h4 id="安装注意事项："><a href="#安装注意事项：" class="headerlink" title="安装注意事项："></a>安装注意事项：</h4><p>（以下大部分为某位师兄的博客总结，由于写的很好并且个人不是很懂这些，当初也是他教我的，所以授权后引用了。）</p><p>跟Node.js一样，git也是直接去<a href="https://git-scm.com/">官网</a>下载对应的64位或32位安装包双击即可。git在安装过程中的选项比较多，这里说一下每个选项大概的意思。</p><p><img src="https://luhawxem.gitee.io/2021/01/22/MyFirstBlogArticle/GitSetup_1.png" alt="img"></p><p>这里的选项基本上不用动，用默认就行。</p><p><img src="https://luhawxem.gitee.io/2021/01/22/MyFirstBlogArticle/GitSetup_2.png" alt="img"></p><p>这里是选择<code>.git</code>文件的默认编辑器，推荐<code>Nano</code>、<code>Vim</code>，个人喜欢用VSCode。</p><p><img src="https://luhawxem.gitee.io/2021/01/22/MyFirstBlogArticle/GitSetup_3.png" alt="img"></p><p>设置初始化时的主分支名，一般用默认。</p><p><img src="https://luhawxem.gitee.io/2021/01/22/MyFirstBlogArticle/GitSetup_4.png" alt="img"></p><p>这里是选择将哪些工具添加到系统的环境变量<code>PATH</code>中。第一个是全部不添加，只能在Git Bash中使用git命令。第二个是仅添加git，不添加git附带的命令行工具(如<code>Nano</code>、<code>Vim</code>这些)。第三个则是将全部工具添加到环境变量中。</p><p><img src="https://luhawxem.gitee.io/2021/01/22/MyFirstBlogArticle/GitSetup_5.png" alt="img"></p><p>选择TLS库。第一个选择的是git自带的TLS库，第二个选的是Windows自带的TLS库。这两个库的差别主要在根证书上，选OpenSSL会使用Git带的根证书，选后者会用系统的根证书。</p><p><img src="https://luhawxem.gitee.io/2021/01/22/MyFirstBlogArticle/GitSetup_6.png" alt="img"></p><p>选择是否自动转换仓库中文件的换行符，此处选择中间项，提交时会自动转化成LF。有关LF、CR、CRLF可以自行百度。</p><p><img src="https://luhawxem.gitee.io/2021/01/22/MyFirstBlogArticle/GitSetup_7.png" alt="img"></p><p>选择Git Bash使用什么终端，建议选MinTTY。</p><p><img src="https://luhawxem.gitee.io/2021/01/22/MyFirstBlogArticle/GitSetup_8.png" alt="img"></p><p>选择<code>git pull</code>命令的默认行为。选第一个或者最后一个，在实际使用中最好避免使用<code>git pull</code>改为手动<code>git fetch</code>然后再<code>git merge</code>，具体命令的作用可以直接百度或者参见<a href="https://www.runoob.com/git/git-tutorial.html">菜鸟教程</a>。</p><p><img src="https://luhawxem.gitee.io/2021/01/22/MyFirstBlogArticle/GitSetup_9.png" alt="img"></p><p>选择git的凭据管理器(类似浏览器的密码管理器)，个人选择第一个。如果没有这个功能，每次提交都需要手动输入密码，git本身没有凭据储存的功能。</p><p><img src="https://luhawxem.gitee.io/2021/01/22/MyFirstBlogArticle/GitSetup_10.png" alt="img"></p><p>缓存和符号链接文件相关。</p><p><img src="https://luhawxem.gitee.io/2021/01/22/MyFirstBlogArticle/GitSetup_11.png" alt="img"></p><p>是否允许在Git Bash中使用Python或NodeJs等外部命令。</p><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a><a href="https://nodejs.org/en/">Node.js</a></h3><p>Node.js 为大多数平台提供了官方的 <a href="https://nodejs.org/en/download/">安装程序</a>。对于中国大陆地区用户，可以前往 <a href="https://npm.taobao.org/mirrors/node">淘宝 Node.js 镜像</a> 下载。</p><p>其它的安装方法：</p><ul><li>Windows：通过 <a href="https://github.com/jasongin/nvs/">nvs</a>（推荐）或者<a href="https://github.com/nvm-sh/nvm">nvm</a> 安装。</li><li>Mac：使用 <a href="https://brew.sh/">Homebrew</a> 或 <a href="http://www.macports.org/">MacPorts</a> 安装。</li><li>Linux（DEB/RPM-based）：从 <a href="https://github.com/nodesource/distributions">NodeSource</a> 安装。</li><li>其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 <a href="https://nodejs.org/en/download/package-manager/">指导</a></li></ul><p>对于 Mac 和 Linux 同样建议使用 nvs 或者 nvm，以避免可能会出现的权限问题。</p><h4 id="配置环境变量："><a href="#配置环境变量：" class="headerlink" title="配置环境变量："></a>配置环境变量：</h4><p>对于环境变量和path相关知识可以参考百度或者<a href="https://blog.csdn.net/Pre_waist_L/article/details/79696507">这篇博客。</a></p><p>下面说说配置步骤：</p><ul><li><p>右击<strong>我的电脑</strong>，打开<strong>高级系统设置</strong>。</p><img src="/2021/04/14/How-to-creat-a-blog-using-hexo/image1.jpg" class=""></li></ul><ul><li><p>打开<strong>环境变量</strong>，在<strong>path</strong>下<strong>编辑</strong>。</p><img src="/2021/04/14/How-to-creat-a-blog-using-hexo/image2.jpg" class=""></li><li><p>选择<strong>新建</strong>，加入Node.js安装时的路径。</p><img src="/2021/04/14/How-to-creat-a-blog-using-hexo/image3.jpg" class=""></li></ul><h4 id="可选操作"><a href="#可选操作" class="headerlink" title="可选操作:"></a>可选操作:</h4><ul><li><p>由于由于Node.js自带的包管理器<code>npm</code>在进行全局安装时会默认安装到C盘，为了减轻C盘的存储空间负担可以将全局安装文件夹的默认路径修改到其他盘符。在管理员模式的cmd窗口下(按win键直接敲cmd搜索或者win键+R输入cmd)执行：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">#这里我将默认路径改到我的Node.js的安装路径下,也可以选择直接安装到D盘根路径下等等<br>npm config set prefix <span class="hljs-string">&quot;D:\NodeJS\node_global&quot;</span> <br>npm config set cache <span class="hljs-string">&quot;D:\NodeJS\node_cache&quot;</span><br></code></pre></td></tr></table></figure></li></ul><p>​       执行完成后，再去系统属性中配置一下环境变量。将<code>D:\NodeJS\node_global</code>    添加到<code>Path</code>中。</p><ul><li><p>由于国内直接使用<code>npm</code>的官方镜像比较慢，所以一般我们安装完<code>Node.js</code>之后都会配置一个淘宝的<code>cnpm</code>镜像源用来代替<code>npm</code>官方的镜像源。淘宝这个镜像源更新还是比较快的，一般不会出现版本不一样的问题。直接在cmd窗口中执行：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">npm install -g cnpm --registry=https:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure></li></ul><p>​      完成之后就可以通过<code>cnpm install</code>来安装模块了，速度会快很多。</p><h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><p><strong>Windows 用户</strong></p><ul><li>使用 Node.js 官方安装程序时，请确保勾选 <strong>Add to PATH</strong> 选项（默认已勾选）</li></ul><p><strong>For Mac / Linux 用户</strong></p><ul><li>如果在尝试安装 Hexo 的过程中出现 <code>EACCES</code> 权限错误，请遵循 <a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally">由 npmjs 发布的指导</a> 修复该问题。强烈建议 <strong>不要</strong> 使用 root、sudo 等方法覆盖权限</li></ul><p><strong>Linux</strong></p><ul><li>If you installed Node.js using Snap, you may need to manually run <code>npm install</code> in the target folder when <a href="https://hexo.io/docs/commands#init">initializing</a> a blog.</li></ul><h3 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h3><p>注册好一个<a href="https://github.com/">github</a>或<a href="https://gitee.com/">gitee</a>的账号，之后打开Git Bash终端对git账号绑定（配置）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">#配置用户名，此处<span class="hljs-string">&quot;username&quot;</span>是自己的账户名<br>git config --global user.name <span class="hljs-string">&quot;username&quot;</span><br>#配置邮箱，<span class="hljs-string">&quot;username@email.com&quot;</span>是注册时所用的邮箱，<br>git config --global user.email <span class="hljs-string">&quot;username@email.com&quot;</span><br>#执行完成后可用以下命令查看配置<br>git config --global --list<br></code></pre></td></tr></table></figure><p>之后可以选择生成SSH公钥，输入：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">ssh-keygen -t rsa<br></code></pre></td></tr></table></figure><p>之后三次回车默认选项yes。之后去<code>C:\Users\用户名\.ssh</code>文件夹中将<code>id_rsa.pub</code>文件中的内容复制出来。去github或者gitee的设置中找到SSH这一项，将复制的内容粘贴到Key中保存配置。这里是设置与git仓库以SSH的方式通信，只能在你是仓库所有人的情况下才能使用，在参与多人协作时非仓库所有者仅能通过HTTPS方式进行通信。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>hexo框架的安装同NodeJs及其包管理器npm与镜像源cnpm，可以通过Windows自带的cmd或者git所带的Git Bash执行以下命令全局安装hexo框架：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">cnpm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>安装完成之后，我们就可以在本地生成自己的博客了。新建一个文件夹如myblog，进去之后右键在此处打开Git Bash。</p><ul><li><code>hexo init</code>：初始化一个博客。</li><li><code>hexo server</code>：在本地(localhost:4000)启动当前博客。</li><li><code>hexo new &quot;文章标题&quot;</code>：创建一篇新文章(markdown格式)</li><li><code>hexo clean</code>：清除生成的临时文件</li><li><code>hexo generate</code>：重新生成(每次对博客进行改动都需要清除之后再重新生成)</li></ul><p>这样，一个hexo博客就已经搭建完成了，但是博客不可能只是在本地使用，所以这里使用github或者gitee的git page项目来部署我们的博客。在此之前需要安装一个自动将hexo博客部署到git上的工具。执行命令<code>cnpm install --save hexo-deployer-git</code>安装。</p><p>之后在github或者gitee中新建一个仓库，仓库名为**<a href="http://github用户名.github.io/">github用户名.github.io</a>**，gitee则是直接以用户名为仓库名和仓库路径。这个仓库名不能随便起，只能按照这个要求，否则无法直接通过<code>https://github用户名.github.io</code>访问到博客页面(gitee的仓库路径需要手动改成用户名，否则则会以分级目录访问，同时gitee仓库需要在服务中手动开启Git Page服务，且每次提交后需要手动重新部署)。</p><p>创建完成后将SSH中的链接复制一下，打开你的博客根文件夹下的_config.yml文件。在最底部找到这一段，填入对应的参数即可，注意<strong>冒号之后均有空格且不可省略</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"># Deployment<br>## Docs: https:<span class="hljs-comment">//hexo.io/docs/deployment.html</span><br>deploy:<br>  type: git #填入git<br>  repo: 刚刚复制的链接 #填入仓库链接<br>  branch: master #这个可以不填，git仓库默认也是master<br></code></pre></td></tr></table></figure><p>保存退出后我们可以直接通过<code>hexo deploy</code>命令将生成的静态文件部署到git仓库，之后就可以通过<code>https://github用户名.github.io</code>直接访问我们的个人博客了。部署在github上的话可能国内连接速度有点慢，gitee会好很多。</p><h2 id="参考资料及后话："><a href="#参考资料及后话：" class="headerlink" title="参考资料及后话："></a>参考资料及后话：</h2><p>在这里感谢一下一位师兄，搭建的时候手把手教了我，并且有问题我马上找他，他也有求必应。因此，这篇博客大部分也是参考他的，这里贴一下他的原博客。</p><p><a href="https://www.luhawxem.com:4000/2021/01/22/MyFirstBlogArticle/"><a href="https://luhawxem.gitee.io/">BBSD丿草丶帽</a></a></p><p><a href="https://www.bilibili.com/video/BV1Yb411a7ty">CodeSheep的hexo博客搭建教程视频bilibili</a></p><p><a href="https://hexo.io/zh-cn/docs/">hexo官方文档</a></p><p>  √落幕  &gt;-&lt;</p>]]></content>
    
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/04/10/hello-world/"/>
    <url>/2021/04/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
