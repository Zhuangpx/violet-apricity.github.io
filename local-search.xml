<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>stack(栈)</title>
    <link href="/2021/04/18/stack/"/>
    <url>/2021/04/18/stack/</url>
    
    <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="规则：LIFO"><a href="#规则：LIFO" class="headerlink" title="规则：LIFO"></a>规则：LIFO</h2><p>后入先出：Last in first out——LIFO</p><h2 id="实现-amp-操作："><a href="#实现-amp-操作：" class="headerlink" title="实现&amp;操作："></a>实现&amp;操作：</h2><h3 id="数组模拟："><a href="#数组模拟：" class="headerlink" title="数组模拟："></a>数组模拟：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">10000</span>;<span class="hljs-comment">//length</span><br><span class="hljs-keyword">int</span> s[N];<span class="hljs-comment">//for int,from s[1] to s[top]</span><br><span class="hljs-keyword">int</span> top;<span class="hljs-comment">//the last in-num</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> top==<span class="hljs-number">0</span>;&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isfull</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> top&gt;=N<span class="hljs-number">-1</span>;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">()</span></span>&#123;top=<span class="hljs-number">0</span>;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isfull</span>())&#123;<span class="hljs-keyword">return</span> ;<span class="hljs-comment">//wrong//&#125;</span><br>    top++;s[top]=x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(ifEmpty())&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//wrong//&#125;</span><br>    top--;<span class="hljs-keyword">return</span> s[top+<span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br>std::stack&lt;Typename T&gt;s;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">std::stack&lt;int&gt;s;</span><br><span class="hljs-comment">std::stack&lt;double&gt;s;</span><br><span class="hljs-comment">.........</span><br><span class="hljs-comment">*/</span><br>std::stack&lt;<span class="hljs-keyword">int</span>&gt;s;<br>s.<span class="hljs-built_in">top</span>();<br>s.<span class="hljs-built_in">empty</span>();<br>s.<span class="hljs-built_in">size</span>();<br>s.<span class="hljs-built_in">push</span>();<br>s.<span class="hljs-built_in">pop</span>();<br>std::stack&lt;<span class="hljs-keyword">int</span>&gt;c=s;<br><span class="hljs-keyword">bool</span> x=c&lt;=s;<br></code></pre></td></tr></table></figure><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p>顾名思义，满足单调性质的栈</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++">stack&lt;<span class="hljs-keyword">int</span>&gt; st;<br><span class="hljs-comment">//此处一般需要给数组最后添加结束标志符</span><br><span class="hljs-keyword">for</span> (遍历这个数组)<br>&#123;<br><span class="hljs-keyword">if</span> (栈空 || 栈顶元素大于等于当前比较元素)<br>&#123;<br>入栈;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">while</span> (栈不为空 &amp;&amp; 栈顶元素小于当前元素)<br>&#123;<br>栈顶元素出栈;<br>更新结果;<br>&#125;<br>当前数据入栈;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>数据结构</tag>
      
      <tag>stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vector(向量)</title>
    <link href="/2021/04/18/vector/"/>
    <url>/2021/04/18/vector/</url>
    
    <content type="html"><![CDATA[<h1 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h1><p>相当于一个动态数组/可变长数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br>std::vector&lt;Typename T&gt;v;<br><span class="hljs-comment">//</span><br>std::vector&lt;<span class="hljs-keyword">int</span>&gt;v;<br><span class="hljs-keyword">int</span> len=v.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">int</span> x;v.<span class="hljs-built_in">push_back</span>(x);<br>v.<span class="hljs-built_in">pop_back</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=v.<span class="hljs-built_in">begin</span>();i&lt;=v.<span class="hljs-built_in">end</span>();i++);<br><span class="hljs-keyword">int</span> x; v.<span class="hljs-built_in">insert</span>(i,x);<br><span class="hljs-keyword">int</span> i; v.<span class="hljs-built_in">erase</span>(i);<br>v.<span class="hljs-built_in">clear</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;v.<span class="hljs-built_in">size</span>();i++)std::cout&lt;&lt;v[i];<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>数据结构</tag>
      
      <tag>vector</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>queue(队列)</title>
    <link href="/2021/04/18/queue/"/>
    <url>/2021/04/18/queue/</url>
    
    <content type="html"><![CDATA[<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id="规则：FIFO"><a href="#规则：FIFO" class="headerlink" title="规则：FIFO"></a>规则：FIFO</h2><p>先入先出：First in first out——FIFO</p><h2 id="队列模拟："><a href="#队列模拟：" class="headerlink" title="队列模拟："></a>队列模拟：</h2><h3 id="数组模拟队列："><a href="#数组模拟队列：" class="headerlink" title="数组模拟队列："></a>数组模拟队列：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//由于进出是整体队列往数组右移，因此可以将数组视为环形缓冲区</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1000</span>;<br><span class="hljs-keyword">int</span> s[N];<br><span class="hljs-keyword">int</span> head,tail;<span class="hljs-comment">//头和尾指针（实际是下标）</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">isempty</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> head==tail;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">isfull</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> head==(tail+<span class="hljs-number">1</span>)%N;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initailize</span><span class="hljs-params">()</span></span>&#123;head=tail=<span class="hljs-number">0</span>;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">enqueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isfull</span>())&#123;<span class="hljs-keyword">return</span> ;<span class="hljs-comment">//wrong//&#125;</span><br>    s[tail]=x;tail++;tail%=N;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dequeue</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isempty</span>())&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//wrong//&#125;</span><br>    <span class="hljs-keyword">int</span> x=s[head];head++;head%=N;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="双栈模拟队列："><a href="#双栈模拟队列：" class="headerlink" title="双栈模拟队列："></a>双栈模拟队列：</h3><p>这种方法使用两个栈 F,S 模拟一个队列，其中 F 是队尾的栈，S 代表队首的栈，支持 push（在队尾插入），pop（在队首弹出）操作：</p><ul><li>push：插入到栈 F 中。</li><li>pop：如果 S 非空，让 S 弹栈；否则把 F 的元素倒过来压到 S 中（其实就是一个一个弹出插入，做完后是首位颠倒的），然后再让 S 弹栈。</li></ul><p>容易证明，每个元素只会进入/转移/弹出一次，均摊复杂度 O（1）。</p><h2 id="STL："><a href="#STL：" class="headerlink" title="STL："></a>STL：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br>std::queue&lt;Typename T&gt;s;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">std::queue&lt;int&gt;s;</span><br><span class="hljs-comment">std::queue&lt;std:;string&gt;c;</span><br><span class="hljs-comment">*/</span><br>std::queue&lt;<span class="hljs-keyword">int</span>&gt;q;<br>intx;q.<span class="hljs-built_in">push</span>(x);<br><span class="hljs-keyword">int</span> first=q.<span class="hljs-built_in">front</span>();<br>q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">int</span> len=q.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">bool</span> flag=q.<span class="hljs-built_in">empty</span>();<br></code></pre></td></tr></table></figure><h2 id="特殊的队列："><a href="#特殊的队列：" class="headerlink" title="特殊的队列："></a>特殊的队列：</h2><h3 id="双端队列："><a href="#双端队列：" class="headerlink" title="双端队列："></a>双端队列：</h3><p>双端队列是指一个可以在队首/队尾插入或删除元素的队列。相当于是<strong>栈与队列功能的结合。</strong>具体地，双端队列支持的操作有 4 个：</p><ul><li>在队首插入一个元素</li><li>在队尾插入一个元素</li><li>在队首删除一个元素</li><li>在队尾删除一个元素</li></ul><p>数组模拟双端队列的方式与普通队列相同。</p><h3 id="循环队列："><a href="#循环队列：" class="headerlink" title="循环队列："></a>循环队列：</h3><p>即上述所说的视为环形缓冲区</p><p>oiwiki如此解释：使用数组模拟队列会导致一个问题：随着时间的推移，整个队列会向数组的尾部移动，一旦到达数组的最末端，即使数组的前端还有空闲位置，再进行入队操作也会导致溢出（这种数组里实际有空闲位置而发生了上溢的现象被称为“假溢出”）。</p><p>解决假溢出的办法是采用循环的方式来组织存放队列元素的数组，即将数组下标为 0 的位置看做是最后一个位置的后继。（数组下标为 <code>x</code> 的元素，它的后继为 <code>(x + 1) % SIZE</code>）。这样就形成了循环队列。</p><h3 id="单调队列："><a href="#单调队列：" class="headerlink" title="单调队列："></a>单调队列：</h3><p>顾名思义，单调队列的重点分为 “单调” 和 “队列”</p><p>“单调” 指的是元素的的 “规律”——递增（或递减）</p><p>“队列” 指的是元素只能从队头和队尾进行操作</p><img src="/2021/04/18/queue/image1.png" class=""><h2 id="优先队列："><a href="#优先队列：" class="headerlink" title="优先队列："></a>优先队列：</h2><p>可以通过定义一定的优先级策略将队列按优先级先后排列。</p><p>其中开头元素拥有最高优先级。</p><p>优先级的基准可以指定也可以默认。</p><p>Typename 就是<strong>数据类型</strong>，Container 就是<strong>容器类型</strong>（Container必须是用数组实现的容器，比如vector,deque等等，但不能用 list。STL里面默认用的是vector），Compare 就是<strong>比较的方式</strong>，当需要用自定义的数据类型时才需要传入这三个参数，使用基本数据类型时，只需要传入数据类型，<strong>默认是大顶堆</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br>std::priority_queue&lt;Typename T&gt;q;<br>std::priority_queue&lt;Typename T,Container K,Compare cmp&gt;q;<br><span class="hljs-comment">//默认序列 ↓</span><br>std::priority_queue&lt;<span class="hljs-keyword">int</span>&gt;q;<span class="hljs-comment">//默认最大的优先级最高优先取出</span><br><span class="hljs-comment">//升序队列 ↓</span><br>priority_queue &lt;<span class="hljs-keyword">int</span>,vector&lt;<span class="hljs-keyword">int</span>&gt;,greater&lt;<span class="hljs-keyword">int</span>&gt; &gt; q;<br><span class="hljs-comment">//降序队列 ↓</span><br>priority_queue &lt;<span class="hljs-keyword">int</span>,vector&lt;<span class="hljs-keyword">int</span>&gt;,less&lt;<span class="hljs-keyword">int</span>&gt; &gt;q;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>数据结构</tag>
      
      <tag>queue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二分&amp;三分</title>
    <link href="/2021/04/18/binary-search/"/>
    <url>/2021/04/18/binary-search/</url>
    
    <content type="html"><![CDATA[<h1 id="二分-amp-三分"><a href="#二分-amp-三分" class="headerlink" title="二分&amp;三分"></a>二分&amp;三分</h1><h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><h3 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h3><p>二分查找（英语：binary search），也称折半搜索（英语：half-interval search）、对数搜索（英语：logarithmic search），是用来在一个<strong>有序</strong>序列中查找某一元素的算法。</p><p><strong>二分是一种细节很多实现很容易出错的搜索算法。</strong></p><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>以在一个升序数组中查找一个数为例。</p><p>它每次考察数组当前部分的中间元素，如果中间元素刚好是要找的，就结束搜索过程；如果中间元素小于所查找的值，那么左侧的只会更小，不会有所查找的元素，只需到右侧查找；如果中间元素大于所查找的值同理，只需到左侧查找。</p><p>这种方法每次可以排除一半的答案，可以以对数形式减少复杂度。</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>二分查找的最优时间复杂度为 O(1)。</p><p>二分查找的平均时间复杂度和最坏时间复杂度均为O(log n) 。因为在二分搜索过程中，算法每次都把查询的区间减半，所以对于一个长度为n 的数组，至多会进行O(log n) 次查找。</p><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>迭代版本的二分查找的空间复杂度为O(1) 。</p><p>递归（无尾调用消除）版本的二分查找的空间复杂度为O(log n) 。</p><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">binary_search</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end, <span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> ret = <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 未搜索到数据返回-1下标</span><br>  <span class="hljs-keyword">int</span> mid;<br>  <span class="hljs-keyword">while</span> (start &lt;= end) &#123;<br>    mid = start + ((end - start) &gt;&gt; <span class="hljs-number">1</span>);  <span class="hljs-comment">// 直接平均可能会溢出，所以用这个算法</span><br>    <span class="hljs-keyword">if</span> (arr[mid] &lt; key)<br>      start = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid] &gt; key)<br>      end = mid - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 最后检测相等是因为多数搜索情况不是大于就是小于</span><br>      ret = mid;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ret;  <span class="hljs-comment">// 单一出口</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h3><p>C++ 标准库中实现了查找<strong>首个不小于给定值</strong>的元素的函数 <a href="https://zh.cppreference.com/w/cpp/algorithm/lower_bound"><code>std::lower_bound</code></a> 和查找<strong>首个大于给定值</strong>的元素的函数 <a href="https://zh.cppreference.com/w/cpp/algorithm/upper_bound"><code>std::upper_bound</code></a>，二者均定义于头文件 <code>&lt;algorithm&gt;</code> 中。</p><p>二者均采用二分实现，所以调用前必须保证元素有序。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="最大值最小化-最小值最大化"><a href="#最大值最小化-最小值最大化" class="headerlink" title="最大值最小化/最小值最大化"></a>最大值最小化/最小值最大化</h4><p>注意，这里的有序是<strong>广义的有序</strong>，如果一个数组中的左侧或者右侧都满足某一种条件，而另一侧都不满足这种条件，也可以看作是一种有序（如果把满足条件看做1 ，不满足看做 0，至少对于这个条件的这一维度是有序的）。换言之，二分搜索法可以用来查找<strong>满足某种条件的最大（最小）的值。</strong></p><p>要求满足某种条件的<strong>最大值的最小可能情况（最大值最小化）</strong>，首先的想法是从小到大<strong>枚举</strong>这个作为答案的「<strong>最大值</strong>」，然后去<strong>判断是否合法</strong>。若答案<strong>单调</strong>，就可以使用二分搜索法来更快地找到答案。因此，要想使用二分搜索法来解这种「最大值最小化」的题目，需要满足以下三个条件：</p><ol><li>答案在一个<strong>固定区间</strong>内；</li><li>可能查找一个符合条件的值不是很容易，但是要求能<strong>比较容易地判断某个值是否是符合条件</strong>的；</li><li><strong>可行解对于区间满足一定的单调性</strong>。换言之，如果 是符合条件的，那么有 x+1或者 x-1也符合条件。（这样下来就满足了上面提到的单调性）</li></ol><p>当然，最小值最大化是同理的。</p><h4 id="二分答案"><a href="#二分答案" class="headerlink" title="二分答案"></a>二分答案</h4><p>当一个问题的答案有限（或者很少），那么我们可以枚举每个答案，然后判断答案是否可行。</p><p>这是基于一些问题<strong>判断一个答案是否合适</strong>比<strong>找到一个合适答案</strong>来的容易。</p><p>因此若答案满足单调性，则满足使用二分法的条件。把这里的枚举换成二分，就变成了“二分答案”。</p><h2 id="三分"><a href="#三分" class="headerlink" title="三分"></a>三分</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在区间内用两个mid将<strong>区间分成三份</strong>，这样的查找算法称为三分查找,也就是三分法，三分法常</p><p>用于求解<strong>单峰函数的最值</strong>。</p><p>还有一种理解，即在二分查找的基础上，在左区间或者右区间上<strong>再进行一次二分</strong>。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>1.先将区间三分,每个区间的长度为1/3(right-left)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">mid1=left+(right-left)/<span class="hljs-number">3</span>;<br>mid2=right-(right-left)/<span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>2.比较mid1和mid2谁更靠近极值，如果mid1更靠近极值，右区间改为mid2,否则左区间改为mid1(后面的代码都是以求最大值即凸函数为例）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>(<span class="hljs-built_in">calc</span>(mid1)&lt;<span class="hljs-built_in">calc</span>(mid2))<br>    left=mid1;<br><span class="hljs-keyword">else</span><br>    right=mid2;<br></code></pre></td></tr></table></figure><p>3.重复1,2过程，直到不满足left+eps&lt;right,也就是找到最值</p><p>算法模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 10e-6</span><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">cal</span><span class="hljs-params">()</span> </span>&#123;&#125; <span class="hljs-comment">//计算题目所需要的值</span><br><span class="hljs-keyword">while</span>(l+eps&lt;r)<br>&#123;<br>    m1=l+(r-l)/<span class="hljs-number">3</span>;<br>    m2=r-(r-l)/<span class="hljs-number">3</span>;<br>    v1=<span class="hljs-built_in">cal</span>(m1);<br>    v2=<span class="hljs-built_in">cal</span>(m2);<br>    <span class="hljs-keyword">if</span>(v1&lt;v2)l=m1;<br>    <span class="hljs-keyword">else</span> r=m2;<br>&#125;<br></code></pre></td></tr></table></figure><p>另一种写法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">Calc</span><span class="hljs-params">(Type a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/* 根据题目的意思计算 */</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Solve</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">double</span> Left, Right;<br>    <span class="hljs-keyword">double</span> mid, midmid;<br>    <span class="hljs-keyword">double</span> mid_value, midmid_value;<br>    Left = MIN; Right = MAX;<br>    <span class="hljs-keyword">while</span> (Left + EPS &lt; Right)<br>    &#123;<br>        mid = (Left + Right) / <span class="hljs-number">2</span>;<br>        midmid = (mid + Right) / <span class="hljs-number">2</span>;<br>        mid_area = <span class="hljs-built_in">Calc</span>(mid);<br>        midmid_area = <span class="hljs-built_in">Calc</span>(midmid);<br>        <span class="hljs-keyword">if</span> (mid_area &gt;= midmid_area) Right = midmid;<br>        <span class="hljs-keyword">else</span> Left = mid;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>算法Algorithm</tag>
      
      <tag>二分</tag>
      
      <tag>三分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>贪心</title>
    <link href="/2021/04/18/greedy-algorithm/"/>
    <url>/2021/04/18/greedy-algorithm/</url>
    
    <content type="html"><![CDATA[<h1 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h1><p>贪心算法（英语：greedy algorithm）又称贪婪算法，是用计算机来模拟一个“贪心”的人做出决策的过程。这个人十分贪婪，每一步行动总是按某种指标选取最优的操作。而且他目光短浅，总是只看眼前，并不考虑以后可能造成的影响。</p><p>可想而知，并不是所有的时候贪心法都能获得最优解，所以一般使用贪心法的时候，都要确保自己能证明其正确性。</p><p>但是事实上在大多比赛的时候不会去很严谨的证明，所以这是个很玄学的算法。</p><h2 id="详细介绍"><a href="#详细介绍" class="headerlink" title="详细介绍"></a>详细介绍</h2><h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><p>贪心算法在有最优子结构的问题中尤为有效。最优子结构的意思是问题能够分解成子问题来解决，子问题的最优解能递推到最终问题的最优解。<a href="https://oi-wiki.org/basic/greedy/#fn:ref1">1</a></p><h3 id="证明方法"><a href="#证明方法" class="headerlink" title="证明方法"></a>证明方法</h3><p>贪心算法有两种证明方法：反证法和归纳法。一般情况下，一道题只会用到其中的一种方法来证明。</p><ol><li>反证法：如果交换方案中任意两个元素/相邻的两个元素后，答案不会变得更好，那么可以推定目前的解已经是最优解了。</li><li>归纳法：先算得出边界情况（例如 n=1）的最优解F1 ，然后再证明：对于每个n ， Fn+1都可以由 Fn推导出结果。</li></ol><h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><h3 id="常见题型"><a href="#常见题型" class="headerlink" title="常见题型"></a>常见题型</h3><p>简单题有两种贪心：</p><ul><li>「我们将 XXX 按照某某顺序排序，然后按某种顺序（例如从小到大）选择。」。</li><li>「我们每次都取 XXX 中最大/小的东西，并更新 XXX。」（有时「XXX 中最大/小的东西」可以优化，比如用优先队列维护）</li></ul><p>二者的区别在于一种是离线的，先处理后选择；一种是在线的，边处理边选择。</p><h3 id="排序解法"><a href="#排序解法" class="headerlink" title="排序解法"></a>排序解法</h3><p>用排序法常见的情况是输入一个包含几个（一般一到两个）权值的数组，通过排序然后遍历模拟计算的方法求出最优值。</p><h3 id="后悔解法"><a href="#后悔解法" class="headerlink" title="后悔解法"></a>后悔解法</h3><p>思路是无论当前的选项是否最优都接受，然后进行比较，如果选择之后不是最优了，则反悔，舍弃掉这个选项；否则，正式接受。如此往复。</p><h2 id="与动态规划的区别："><a href="#与动态规划的区别：" class="headerlink" title="与动态规划的区别："></a>与动态规划的区别：</h2><p>贪心算法与<strong>动态规划</strong>的不同在于它对每个子问题的解决方案都做出选择，不能回退。动态规划则会保存以前的运算结果，并根据以前的结果对当前进行选择，有回退功能。</p><h2 id="些许个人理解："><a href="#些许个人理解：" class="headerlink" title="些许个人理解："></a>些许个人理解：</h2><p>个人认为贪心最重要的是找出一个可以贪心的方案，通过思维大胆猜测，同时结合一些细节和其它知识，然后再验证一下正确性。</p><p>所以个人觉得这是个很考验思维的算法，没有固定套路，可难可易，重在积累。</p>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>算法Algorithm</tag>
      
      <tag>贪心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前缀和&amp;差分</title>
    <link href="/2021/04/18/sum-difference/"/>
    <url>/2021/04/18/sum-difference/</url>
    
    <content type="html"><![CDATA[<h1 id="前缀和-amp-差分"><a href="#前缀和-amp-差分" class="headerlink" title="前缀和&amp;差分"></a>前缀和&amp;差分</h1><h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><p>前缀和是一种预处理，能减少查询复杂度，大致可以理解为<strong>序列的前n项和</strong>。即：<br>$$<br>sum[n]=sum(a[i]) (i&lt;=n)<br>$$<br>可以用来求区间和。如a[l,r]=sum[r]-sum[l-1]。</p><h3 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h3><p>c++标准库提供了 <a href="https://zh.cppreference.com/w/cpp/algorithm/partial_sum"><code>std::partial_sum</code></a>函数，定义于头文件 <code>&lt;numeric&gt;</code> 中。</p><p>假设要处理的序列为a，前缀和存储在arr中，那么有以下几种重载：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//1.partial_sum(容器要计算的起始位置，容器要计算的结束位置，结果存放的起始位置)</span><br>std::<span class="hljs-built_in">partial_sum</span>(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>(),arr)<br>    <br><span class="hljs-comment">//2.partial_sum(容器要计算的起始位置，容器要计算的结束位置，结果存放的起始位置，自定义函数)</span><br>std::<span class="hljs-built_in">partial_sum</span>(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>(),arr,func)<br>    <br><span class="hljs-comment">//3.partial_sum(容器要计算的起始位置，容器要计算的结束位置，结果存放的起始位置)</span><br>std::<span class="hljs-built_in">partial_sum</span>(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>(),arr.<span class="hljs-built_in">begin</span>())<br>    <br><span class="hljs-comment">//4.partial_sum(容器要计算的起始位置，容器要计算的结束位置，结果存放的起始位置，自定义函数)</span><br>std::<span class="hljs-built_in">partial_sum</span>(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>(),arr.<span class="hljs-built_in">begin</span>(),func)<br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">55</span>];<br><span class="hljs-keyword">int</span> arr[<span class="hljs-number">10</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> x-y+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//IOS</span><br>    <span class="hljs-keyword">int</span> n=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)a[i]=i+<span class="hljs-number">1</span>;<br>    std::<span class="hljs-built_in">partial_sum</span>(a,a+<span class="hljs-number">5</span>,arr+<span class="hljs-number">2</span>,func);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:arr)std::cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    SYP<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对比：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">-2</span> <span class="hljs-number">-5</span> <span class="hljs-number">-9</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="二维-多维前缀和"><a href="#二维-多维前缀和" class="headerlink" title="二维/多维前缀和"></a>二维/多维前缀和</h3><p>多维前缀和的普通求解方法几乎都是基于<strong>容斥原理</strong>。</p><p>比如我们有这样一个矩阵 ，可以视为二维数组：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span><br><span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span><br><span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>我们定义一个矩阵 sum，sum[x,y]=(x,y)+(a,b)，其中(a,b)表示位于(x,y)左边及上边的数。</p><p>那么这个矩阵长这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">1</span>  <span class="hljs-number">3</span>  <span class="hljs-number">7</span>  <span class="hljs-number">10</span><br><span class="hljs-number">6</span>  <span class="hljs-number">9</span>  <span class="hljs-number">15</span> <span class="hljs-number">22</span><br><span class="hljs-number">12</span> <span class="hljs-number">18</span> <span class="hljs-number">29</span> <span class="hljs-number">45</span><br></code></pre></td></tr></table></figure><p><strong>第一个问题</strong>就是递推求sum[i,j]的过程：<br>$$<br>sum[i,j]=sum[i-1,j]+sum[i,j-1]-sum[i-1,j-1]+a[i,j]。<br>$$<br>代码就是这样子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>         b[i][j]=b[i<span class="hljs-number">-1</span>][j]+b[i][j<span class="hljs-number">-1</span>]-b[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+a[i][j];<br></code></pre></td></tr></table></figure><p><strong>第二个问题</strong>就是如何应用，譬如求(x1,y1)-(x2,y2)子矩阵的和。</p><p>那么，根据类似的思考过程，易得答案为：<br>$$<br>sum[x2,y2]-sum[x1-1,y2]-sum[x2,y1-1]+sum[x1-1,y1-1]。<br>$$<br>当维数增加时同样可以类似的用容斥解决。</p><p>比如说<strong>三维</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;=p;k++)<br>              b[i][j][k]=b[i<span class="hljs-number">-1</span>][j][k]+b[i][j<span class="hljs-number">-1</span>][k]+b[i][j][k<span class="hljs-number">-1</span>]<br>                            -b[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>][k]-b[i<span class="hljs-number">-1</span>][j][k<span class="hljs-number">-1</span>]-b[i][j<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]<br>                            +b[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>][k<span class="hljs-number">-1</span>]+a[i][j][k];<br></code></pre></td></tr></table></figure><h3 id="基于DP计算高维前缀和（sosdp）"><a href="#基于DP计算高维前缀和（sosdp）" class="headerlink" title="基于DP计算高维前缀和（sosdp）"></a>基于DP计算高维前缀和（sosdp）</h3><p>基于容斥原理来计算高维前缀和的方法，其优点在于形式较为简单，无需特别记忆，但当维数升高时，其复杂度较高。这里介绍一种基于DP计算高维前缀和的方法。该方法即通常语境中所称的 <strong>高维前缀和</strong>。</p><p>先讨论<strong>二维</strong>：</p><p>除了容斥也可以一维一维地求：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>        a[i][j] += a[i - <span class="hljs-number">1</span>][j];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>        a[i][j] += a[i][j - <span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure><p>那么类似的我们可以推到<strong>三维</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++) <br>            a[i][j][k] += a[i - <span class="hljs-number">1</span>][j][k];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++)<br>            a[i][j][k] += a[i][j - <span class="hljs-number">1</span>][k];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++)<br>            a[i][j][k] += a[i][j][k - <span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure><p>那么正题来了，多维前缀和也是同样的道理，核心思想也是一维一维地求，可以类比二维模拟一下。</p><p>但是我们不可能n维写个n层的for循环，所以这里应用<strong>集合</strong>方式简化，再基于dp记忆化，对于某个集合由另一个集合推来。结果就是以下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1</span> &lt;&lt; n; i++)<br>        <span class="hljs-keyword">if</span>(i &gt;&gt; j &amp; <span class="hljs-number">1</span>) f[i] += f[i ^ (<span class="hljs-number">1</span> &lt;&lt; j)];<br></code></pre></td></tr></table></figure><h3 id="树上前缀和"><a href="#树上前缀和" class="headerlink" title="树上前缀和"></a>树上前缀和</h3><p>（待补充）</p><h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><p>将前缀和和差分放在一起，因为它们两可以说是相对的策略，差分可以看作求和的逆运算。即：<br>$$<br>if(n==1)b[n]=a[n]<br>$$</p><p>$$<br>if(n&gt;=2)b[n]=a[n]-a[n-1]<br>$$</p><h3 id="简单性质"><a href="#简单性质" class="headerlink" title="简单性质"></a>简单性质</h3><ul><li>设sum为b前缀和，则：</li></ul><p>$$<br>a[n]=sum[n]<br>$$</p><p>​       也就是说 原<strong>数组A的差分数组是B，数组B的前缀和数组是A。</strong></p><ul><li>现在有操作：<br>$$<br>a[i]=a[i]+d :(l&lt;=i&lt;=r)<br>$$</li></ul><p>​       则：<br>$$<br>b[l]=b[l]+d<br>$$</p><p>$$<br>b[r+1]=b[r]-d:(if(r+1&lt;=n))<br>$$</p><h3 id="STL-1"><a href="#STL-1" class="headerlink" title="STL"></a>STL</h3><p>C++ 标准库中实现了差分函数 <a href="https://zh.cppreference.com/w/cpp/algorithm/adjacent_difference"><code>std::adjacent_difference</code></a>，定义于头文件 <code>&lt;numeric&gt;</code> 中。</p><p>方法与<a href="https://zh.cppreference.com/w/cpp/algorithm/partial_sum"><code>std::partial_sum</code></a>类似，示例如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">55</span>];<br><span class="hljs-keyword">int</span> c[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">int</span> b[<span class="hljs-number">10</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> x-y+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)a[i]=i+<span class="hljs-number">1</span>;<br>    std::<span class="hljs-built_in">adjacent_difference</span>(a,a+<span class="hljs-number">5</span>,c+<span class="hljs-number">2</span>,func);<br>    std::<span class="hljs-built_in">adjacent_difference</span>(a,a+<span class="hljs-number">5</span>,b+<span class="hljs-number">2</span>);<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;eg.1:&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:c)std::cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;eg.2:&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:b)std::cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对比：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">   a:<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br>eg<span class="hljs-number">.1</span>:<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br>eg<span class="hljs-number">.2</span>:<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="树上差分"><a href="#树上差分" class="headerlink" title="树上差分"></a>树上差分</h3><p>（待补充）</p><h3 id="点差分"><a href="#点差分" class="headerlink" title="点差分"></a>点差分</h3><p>（待补充）</p><h3 id="边差分"><a href="#边差分" class="headerlink" title="边差分"></a>边差分</h3><p>（待补充）</p>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>算法Algorithm</tag>
      
      <tag>前缀和</tag>
      
      <tag>差分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分治</title>
    <link href="/2021/04/18/Divide-and-Conquer/"/>
    <url>/2021/04/18/Divide-and-Conquer/</url>
    
    <content type="html"><![CDATA[<h1 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h1><p>分治（英语：Divide and Conquer），字面上的解释是“分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。</p><h2 id="分治算法的核心思想就是“分而治之”。"><a href="#分治算法的核心思想就是“分而治之”。" class="headerlink" title="分治算法的核心思想就是“分而治之”。"></a>分治算法的核心思想就是“分而治之”。</h2><h3 id="大概的流程可以分为三步：分解-gt-解决-gt-合并。"><a href="#大概的流程可以分为三步：分解-gt-解决-gt-合并。" class="headerlink" title="大概的流程可以分为三步：分解 -&gt; 解决 -&gt; 合并。"></a>大概的流程可以分为三步：分解 -&gt; 解决 -&gt; 合并。</h3><ol><li>分解原问题为结构相同的子问题。</li><li>分解到某个容易求解的边界之后，进行递归求解。</li><li>将子问题的解合并成原问题的解。</li></ol><h3 id="分治法能解决的问题一般有如下特征："><a href="#分治法能解决的问题一般有如下特征：" class="headerlink" title="分治法能解决的问题一般有如下特征："></a>分治法能解决的问题一般有如下特征：</h3><ul><li>该问题的规模<strong>缩小到一定的程度就可以容易地解决</strong>。</li><li>该问题可以分解为若干个规模较小的相同问题，即该问题具有<strong>最优子结构性质</strong>，利用该问题分解出的子问题的解可以<strong>合并</strong>为该问题的解。</li><li>该问题所分解出的各个子问题是<strong>相互独立</strong>的，即子问题之间不包含公共的子问题。</li></ul><p>PS：子问题重复时，dp比分治来着好。</p>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>算法Algorithm</tag>
      
      <tag>分治</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>递归</title>
    <link href="/2021/04/18/Recursion/"/>
    <url>/2021/04/18/Recursion/</url>
    
    <content type="html"><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p>递归（英语：Recursion），在数学和计算机科学中是指在函数的定义中使用函数自身的方法，在计算机科学中还额外指一种通过重复将问题分解为同类的子问题而解决问题的方法。</p><p>递归的基本思想是某个函数直接或者间接地调用自身，这样原问题的求解就转换为了许多性质相同但是规模更小的子问题。求解时只需要关注如何把原问题划分成符合条件的子问题，而不需要过分关注这个子问题是如何被解决的。</p><p>递归代码最重要的两个特征：结束条件和自我调用。自我调用是在解决子问题，而结束条件定义了最简子问题的答案。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">func</span><span class="hljs-params">(传入数值)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (终止条件) <span class="hljs-keyword">return</span> 最小子问题解;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">func</span>(缩小规模);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h2><p>在程序执行中，递归是利用堆栈来实现的。每当进入一个函数调用，栈就会增加一层栈帧，每次函数返回，栈就会减少一层栈帧。而栈不是无限大的，当递归层数过多时，就会造成 <strong>栈溢出</strong> 的后果。</p><h2 id="递归优化："><a href="#递归优化：" class="headerlink" title="递归优化："></a>递归优化：</h2><p>剪枝</p><p>搜索优化</p><p>记忆化搜索</p><p>（具体问题具体分析）</p><h2 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h2><img src="/2021/04/18/Recursion/image1.png" class=""><h1 id="递推"><a href="#递推" class="headerlink" title="递推"></a>递推</h1><p>与递归结合理解</p><p>对于一个问题，以已知“问题边界”为起点向“原问题”走向推导的拓展方式就是递推。</p><p>反之以“原问题”为起点寻找缩小状态到已知“问题边界”的路线，再通过该路线方向回溯的遍历方式就是递归。</p>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>算法Algorithm</tag>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>背包dp问题</title>
    <link href="/2021/04/18/PackDP/"/>
    <url>/2021/04/18/PackDP/</url>
    
    <content type="html"><![CDATA[<p>具体见<a href="https://github.com/tianyicui/pack">背包九讲</a></p><h1 id="前导："><a href="#前导：" class="headerlink" title="前导："></a>前导：</h1><p>f-解决方案即状态，v-容量，c-物品体积即费用，w-物品价值，s-物品数量，k-物品类型，d-另一种费用，u-另一个容量</p><h1 id="总思路：循环物体-循环容量-循环决策"><a href="#总思路：循环物体-循环容量-循环决策" class="headerlink" title="总思路：循环物体-循环容量-循环决策"></a>总思路：循环物体-循环容量-循环决策</h1><h1 id="初始化问题。"><a href="#初始化问题。" class="headerlink" title="初始化问题。"></a>初始化问题。</h1><p>要求恰好装满背包：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">define fINF=<span class="hljs-number">0x3c3c3c3c</span>  <span class="hljs-comment">//fINF为负无穷</span><br>std::<span class="hljs-built_in">memset</span>(f,fINF,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f)); <span class="hljs-comment">//其他fINF</span><br>f[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>; <span class="hljs-comment">//首位0</span><br></code></pre></td></tr></table></figure><p>不需恰好装满：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">std::<span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br></code></pre></td></tr></table></figure><h1 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h1><p>直接上一维：</p><p>sum-前缀和数组，用于常数优化下界。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//AcWing 01背包 https://www.acwing.com/problem/content/2/</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1005</span>;<br><span class="hljs-keyword">int</span> sum[N],f[N],c[N],w[N];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,v;<br>    std::cin&gt;&gt;n&gt;&gt;v;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        std::cin&gt;&gt;c[i]&gt;&gt;w[i];<br>        sum[i]=sum[i<span class="hljs-number">-1</span>]+c[i];<br>    &#125;<br>    <span class="hljs-comment">//核心</span><br>    std::<span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">int</span> p=std::<span class="hljs-built_in">max</span>((v-sum[n]-sum[i]),c[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=v;j&gt;=p;j--)&#123;<br>            f[j]=std::<span class="hljs-built_in">max</span>(f[j],f[j-c[i]]+w[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//核心</span><br>    <br>    std::cout&lt;&lt;f[v]&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-comment">//SYP</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h1><p>与01背包的区别在于枚举方向（正向），常数优化不可用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//AcWing 完全背包 https://www.acwing.com/problem/content/3/</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1005</span>;<br><span class="hljs-keyword">int</span> n,v;<br><span class="hljs-keyword">int</span> c[N],w[N];<br><span class="hljs-keyword">int</span> f[N];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cin&gt;&gt;n&gt;&gt;v;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        std::cin&gt;&gt;c[i]&gt;&gt;w[i];<br>    &#125;<br>    <br>    <span class="hljs-comment">//核心</span><br>    std::<span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=c[i];j&lt;=v;j++)&#123;<br>            f[j]=std::<span class="hljs-built_in">max</span>(f[j],f[j-c[i]]+w[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//核心</span><br>    <br>    std::cout&lt;&lt;f[v]&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以化成01背包求解</p><h1 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h1><h2 id="二进制优化版本（化为01背包）："><a href="#二进制优化版本（化为01背包）：" class="headerlink" title="二进制优化版本（化为01背包）："></a>二进制优化版本（化为01背包）：</h2><p>将某一物体二进制划分，按位讲其分位多个物体，再采取01背包的方式逐一判断选择。</p><p>边读边解版本：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//AcWing 多重背包 https://www.acwing.com/problem/content/4/</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1005</span>;<br><span class="hljs-keyword">int</span> n,v;<br><span class="hljs-keyword">int</span> c[N],w[N],s[N];<br><span class="hljs-keyword">int</span> f[N];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cin&gt;&gt;n&gt;&gt;v;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-comment">//std::cin&gt;&gt;s[i]&gt;&gt;w[i]&gt;&gt;c[i];</span><br>        std::cin&gt;&gt;c[i]&gt;&gt;w[i]&gt;&gt;s[i];<br>    &#125;<br>    <br>    <span class="hljs-comment">//核心</span><br>    std::<span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123; <span class="hljs-comment">//这里还可以优化一下：即先判断够不够多，够多可以直接完全背包，不够分成01背包</span><br>        <span class="hljs-keyword">int</span> k=std::<span class="hljs-built_in">min</span>(s[i],v/c[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> p=<span class="hljs-number">1</span>;k;p&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">if</span>(p&gt;k)p=k;<br>            k-=p;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=v;j&gt;=c[i]*p;j--)f[j]=std::<span class="hljs-built_in">max</span>(f[j],f[j-c[i]*p]+w[i]*p);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//核心</span><br>    <br>    std::cout&lt;&lt;f[v]&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>存下来的版本：</p><p>纯用来理解，显然没有第一种优</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1005</span>;<br><span class="hljs-keyword">int</span> n,v;<br><span class="hljs-keyword">int</span> c[N],w[N],s[N];<br><span class="hljs-keyword">int</span> f[N];<br><span class="hljs-keyword">int</span> newc[N],neww[N];<br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cin&gt;&gt;n&gt;&gt;v;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        std::cin&gt;&gt;c[i]&gt;&gt;w[i]&gt;&gt;s[i];<br>    &#125;<br>    std::<span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;s[i];j&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">if</span>(j&gt;s[i])j=s[i];<br>            cnt++;<br>            newc[cnt]=j*c[i],neww[cnt]=j*w[i];<br>            s[i]-=j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=cnt;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=v;j&gt;=newc[i];j--)&#123;<br>            f[j]=std::<span class="hljs-built_in">max</span>(f[j],f[j-newc[i]]+neww[i]);<br>        &#125;<br>    &#125;<br>    std::cout&lt;&lt;f[v]&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="单调队列优化版本："><a href="#单调队列优化版本：" class="headerlink" title="单调队列优化版本："></a>单调队列优化版本：</h2><p>使用单调队列相当于一个滑动窗口，要点在于单调队列的更新和问题的转化。</p><p>参见博客：<a href="https://blog.csdn.net/flyinghearts/article/details/5898183?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.baidujs&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.baidujs">https://blog.csdn.net/flyinghearts/article/details/5898183?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.baidujs&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.baidujs</a></p><img src="/2021/04/18/PackDP/image1.png" class=""><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//“多重背包”通用模板</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAX_V = <span class="hljs-number">100004</span>;<br><span class="hljs-comment">//v、n、w：当前所处理的这类物品的体积、个数、价值</span><br><span class="hljs-comment">//V：背包体积， MAX_V：背包的体积上限值</span><br><span class="hljs-comment">//f[i]：体积为i的背包装前几种物品，能达到的价值上限。</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f[], <span class="hljs-keyword">int</span> V, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span> || v == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;               <span class="hljs-comment">//01背包</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = V; i &gt;= v; --i)<br>      <span class="hljs-keyword">if</span> (f[i] &lt; f[i - v] + w) f[i] = f[i - v] + w;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (n * v &gt;= V - v + <span class="hljs-number">1</span>) &#123;   <span class="hljs-comment">//完全背包(n &gt;= V / v)</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = v; i &lt;= V; ++i)<br>      <span class="hljs-keyword">if</span> (f[i] &lt; f[i - v] + w) f[i] = f[i - v] + w;<br>    <span class="hljs-keyword">return</span>;    <br>  &#125;<br><br>  <span class="hljs-keyword">int</span> va[MAX_V], vb[MAX_V];   <span class="hljs-comment">//va/vb: 主/辅助队列</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; v; ++j) &#123;     <span class="hljs-comment">//多重背包</span><br>    <span class="hljs-keyword">int</span> *pb = va, *pe = va - <span class="hljs-number">1</span>;     <span class="hljs-comment">//pb/pe分别指向队列首/末元素</span><br>    <span class="hljs-keyword">int</span> *qb = vb, *qe = vb - <span class="hljs-number">1</span>;     <span class="hljs-comment">//qb/qe分别指向辅助队列首/末元素  </span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = j, i = <span class="hljs-number">0</span>; k &lt;= V; k += v, ++i) &#123;<br>      <span class="hljs-keyword">if</span> (pe  == pb + n) &#123;       <span class="hljs-comment">//若队列大小达到指定值，第一个元素X出队。</span><br>        <span class="hljs-keyword">if</span> (*pb == *qb) ++qb;   <span class="hljs-comment">//若辅助队列第一个元素等于X，该元素也出队。 </span><br>        ++pb;<br>      &#125;<br>      <span class="hljs-keyword">int</span> tt = f[k] - i * w;<br>      *++pe = tt;                  <span class="hljs-comment">//元素X进队</span><br>      <span class="hljs-comment">//删除辅助队列所有小于X的元素，qb到qe单调递减，也可以用二分法</span><br>      <span class="hljs-keyword">while</span> (qe &gt;= qb &amp;&amp; *qe &lt; tt) --qe;<br>      *++qe = tt;              <span class="hljs-comment">//元素X也存放入辅助队列        </span><br>      f[k] = *qb + i * w;      <span class="hljs-comment">//辅助队列首元素恒为指定队列所有元素的最大值</span><br>    &#125;<br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br><br><span class="hljs-comment">//AcWing:https://www.acwing.com/problem/content/description/6/</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STD using namespace std;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> db double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ldb long double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS std::ios::sync_with_stdio(false),std::cin.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 88888888</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> r0 return 0;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SYP system(<span class="hljs-meta-string">&quot;pause&quot;</span>);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br>STD<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">20020</span>;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">int</span> f[N],q[N],g[N];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v,w,s;<br>        cin&gt;&gt;v&gt;&gt;w&gt;&gt;s;<br>        <span class="hljs-built_in">memcpy</span>(g,f,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;v;j++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> hh=<span class="hljs-number">0</span>,tt=<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;k&lt;=m;k+=v)<br>            &#123;<br>                f[k]=g[k];<br>                <span class="hljs-keyword">if</span>(hh&lt;=tt &amp;&amp; k-s*v&gt;q[hh])  <br>                <span class="hljs-comment">//如果当前窗口的内容超过了s个;</span><br>                &#123;<br>                    hh++;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(hh&lt;=tt) <br>                &#123;<br>                    f[k]=<span class="hljs-built_in">max</span>(f[k],g[q[hh]]+(k-q[hh])/v*w); <br>                    <span class="hljs-comment">//max(f[i-1][k],f[i-1][能转移里最大]+个数*v[i]);</span><br>                &#125;<br>                <span class="hljs-keyword">while</span>(hh&lt;=tt &amp;&amp; g[q[tt]]-(q[tt]-j)/v*w &lt;= g[k]-(k-j)/v*w)<br>                &#123;<br>                    tt--;<br>                &#125;<br>                q[++tt]=k;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;f[m]&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="混合背包"><a href="#混合背包" class="headerlink" title="混合背包"></a>混合背包</h1><p>本质上为前几种背包混合，因此只需要更新f时判断一下k即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=N;i++)&#123;<br>    <span class="hljs-keyword">int</span> t=k[i];<br>    <span class="hljs-keyword">if</span>(t==<span class="hljs-number">1</span>)<span class="hljs-built_in">ZeroOnePack</span>(f,c[i],w[i]);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t==<span class="hljs-number">2</span>)<span class="hljs-built_in">CompletePack</span>(f,c[i],w[i]);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t==<span class="hljs-number">3</span>)<span class="hljs-built_in">MultiplePack</span>(f,c[i],w[i],s[i]);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c++">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br><br><span class="hljs-comment">//AcWing 混合背包问题 https://www.acwing.com/problem/content/7/</span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STD using namespace std;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> db double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ldb long double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS std::ios::sync_with_stdio(false),std::cin.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 88888888</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> r0 return 0;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SYP system(<span class="hljs-meta-string">&quot;pause&quot;</span>);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ZeroOnePack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *f,<span class="hljs-keyword">int</span> c,<span class="hljs-keyword">int</span> w,<span class="hljs-keyword">int</span> v)</span><span class="hljs-comment">//01背包</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=v;i&gt;=c;i--)&#123;<br>        f[i]=std::<span class="hljs-built_in">max</span>(f[i],f[i-c]+w);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CompletePack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *f,<span class="hljs-keyword">int</span> c,<span class="hljs-keyword">int</span> w,<span class="hljs-keyword">int</span> v)</span><span class="hljs-comment">//完全背包</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=c;i&lt;=v;i++)&#123;<br>        f[i]=std::<span class="hljs-built_in">max</span>(f[i],f[i-c]+w);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MultiplePack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *f,<span class="hljs-keyword">int</span> c,<span class="hljs-keyword">int</span> w,<span class="hljs-keyword">int</span> s,<span class="hljs-keyword">int</span> v)</span><span class="hljs-comment">//多重背包</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(c*s&gt;=v)&#123;<br>        <span class="hljs-comment">//CompletePack(f,c,w,v);</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=c;i&lt;=v;i++)&#123;<br>            f[i]=std::<span class="hljs-built_in">max</span>(f[i],f[i-c]+w);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">int</span> k=std::<span class="hljs-built_in">min</span>(s,v/c);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> p=<span class="hljs-number">1</span>;k;p&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(p&gt;k)p=k;<br>        k-=p;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=v;j&gt;=c*p;j--)f[j]=std::<span class="hljs-built_in">max</span>(f[j],f[j-c*p]+w*p);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1011</span>;<br><span class="hljs-keyword">int</span> f[N];<br><span class="hljs-keyword">int</span> w[N],c[N],s[N];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">int</span> v;<br>    std::cin&gt;&gt;n&gt;&gt;v;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        std::cin&gt;&gt;c[i]&gt;&gt;w[i]&gt;&gt;s[i];<br>    &#125;<br>    std::<span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> f);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">int</span> t=s[i];<br>        <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-number">-1</span>)<span class="hljs-built_in">ZeroOnePack</span>(f,c[i],w[i],v);<span class="hljs-comment">//01背包</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-number">0</span>)<span class="hljs-built_in">CompletePack</span>(f,c[i],w[i],v);<span class="hljs-comment">//完全背包</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">MultiplePack</span>(f,c[i],w[i],s[i],v);<span class="hljs-comment">//多重背包</span><br>    &#125;<br>    std::cout&lt;&lt;f[v]&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    SYP<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="二维费用的背包问题"><a href="#二维费用的背包问题" class="headerlink" title="二维费用的背包问题"></a>二维费用的背包问题</h1><p>费用增加一维，状态也增加一维即 f[i,v,u]=max(f[i-1,v,u],f[i-1,v-c[i],u-d[i]]+w[i]);</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">f[i,v,u]=<span class="hljs-built_in">max</span>(f[i<span class="hljs-number">-1</span>,v,u],f[i<span class="hljs-number">-1</span>,v-c[i],u-d[i]]+w[i]);<br></code></pre></td></tr></table></figure><p>二维费用可能以物品最多去几件暗示给出，即件数为另一个费用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c++">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STD using namespace std;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> db double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ldb long double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS std::ios::sync_with_stdio(false),std::cin.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 88888888</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> r0 return 0;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SYP system(<span class="hljs-meta-string">&quot;pause&quot;</span>);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><br><span class="hljs-comment">//AcWing 二维费用的背包问题 https://www.acwing.com/problem/content/description/8/</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1005</span>;<br><span class="hljs-keyword">int</span> sum[N],sum_[N],f[N][N],c[N],w[N],p[N];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,v,m;<br>    std::cin&gt;&gt;n&gt;&gt;v&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        std::cin&gt;&gt;c[i]&gt;&gt;p[i]&gt;&gt;w[i];<br>        sum[i]=sum[i<span class="hljs-number">-1</span>]+c[i];<br>        sum_[i]=sum_[i<span class="hljs-number">-1</span>]+p[i];<br>    &#125;<br>    <span class="hljs-comment">//核心</span><br>    std::<span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">int</span> d=std::<span class="hljs-built_in">max</span>((v-sum[n]-sum[i]),c[i]);<br>        <span class="hljs-keyword">int</span> l=std::<span class="hljs-built_in">max</span>((m-sum_[n]-sum_[i]),p[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=v;j&gt;=d;j--)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=m;k&gt;=l;k--)&#123;<br>                f[j][k]=std::<span class="hljs-built_in">max</span>(f[j][k],f[j-c[i]][k-p[i]]+w[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//核心</span><br>    std::cout&lt;&lt;f[v][m]&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    SYP<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h1><p>每组背包物品相互冲突最多只能取一个，那么加上三层循环枚举背包组–状态（v–&gt;0）–该背包内某个物品（1–&gt;s[i]）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STD using namespace std;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> db double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ldb long double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS std::ios::sync_with_stdio(false),std::cin.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 88888888</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> r0 return 0;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SYP system(<span class="hljs-meta-string">&quot;pause&quot;</span>);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><br><span class="hljs-comment">//分组背包 AcWing https://www.acwing.com/problem/content/9/</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1005</span>;<br><span class="hljs-keyword">int</span> f[N];<br><span class="hljs-keyword">int</span> s[N];<br><span class="hljs-keyword">int</span> c[N][N];<br><span class="hljs-keyword">int</span> w[N][N];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,v,m;<br>    std::cin&gt;&gt;n&gt;&gt;v;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        std::cin&gt;&gt;s[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=s[i];j++)&#123;<br>            std::cin&gt;&gt;c[i][j]&gt;&gt;w[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//核心</span><br>    std::<span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;  <span class="hljs-comment">//背包分组</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=v;j&gt;=<span class="hljs-number">0</span>;j--)&#123;  <span class="hljs-comment">//容量</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;=s[i];k++)&#123;  <span class="hljs-comment">//物品</span><br>                <span class="hljs-keyword">if</span>(j&gt;=c[i][k])f[j]=std::<span class="hljs-built_in">max</span>(f[j],f[j-c[i][k]]+w[i][k]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    std::cout&lt;&lt;f[v]&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    SYP<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="有依赖的背包问题"><a href="#有依赖的背包问题" class="headerlink" title="有依赖的背包问题"></a>有依赖的背包问题</h1><p>物品之间存在依赖关系，即选择吗，某个物体必须选择另一个物体。类似于一棵树，<strong>选择子节点必须先选择父节点</strong>。也可以这么想，每个主件都有附件，每个附件也可能是一个主件，每次选择一个整体，即<strong>主件和属于它的若干个附件</strong>。那么在这里可以将其化为<strong>分组背包</strong>。</p><p>实际上这也是个<strong>树上dp问题</strong>具体解决方案为：1.画出一棵树，2.dfs[root]，对节点至上而下深搜，对于每个状态当前节点选择之后往下更新，枚举子树分到的容量。</p><p>这里用邻接表画树。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c++">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STD using namespace std;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> db double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ldb long double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS std::ios::sync_with_stdio(false),std::cin.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 88888888</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> r0 return 0;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SYP system(<span class="hljs-meta-string">&quot;pause&quot;</span>);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><br><span class="hljs-comment">//AcWing:https://www.acwing.com/problem/content/description/10/</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1005</span>;<br><span class="hljs-keyword">int</span> n,v,root;<br><span class="hljs-keyword">int</span> f[N][N];<br><span class="hljs-keyword">int</span> c[N],w[N];<br><span class="hljs-keyword">int</span> h[N];<span class="hljs-comment">//邻接表的头，下标为节点标号，权值为当前节点最后加入的边的标号</span><br><span class="hljs-keyword">int</span> ne[N];<span class="hljs-comment">//nextedge，下标为节点标号，-1表示没有下一条边，权值为当前节点下一条边的标号</span><br><span class="hljs-keyword">int</span> e[N];<span class="hljs-comment">//边的集合，下标是边的标号，权值是当前边的终点</span><br><span class="hljs-keyword">int</span> cnt;<span class="hljs-comment">//保存每条边的上一条边的标号</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span><span class="hljs-comment">//邻接表加边操作，仔细体会</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">//上一条边终点为b 上一条边的下一条边为当前边 更新起点为a的边</span><br>    e[cnt]=b,ne[cnt]=h[a],h[a]=cnt++;<span class="hljs-comment">//加入边a-b更新cnt++即为下一条边</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span><span class="hljs-comment">//深搜一下</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=h[u];i!=<span class="hljs-number">-1</span>;i=ne[i])<span class="hljs-comment">//遍历当前节点的边</span><br>    &#123;<br>        <span class="hljs-keyword">int</span> son=e[i];<span class="hljs-comment">//当前边的终点，即子节点</span><br>        <span class="hljs-built_in">dfs</span>(son);<span class="hljs-comment">//先往下，对子节点深搜</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=v-c[u];j&gt;=<span class="hljs-number">0</span>;j--)&#123;<br>            <span class="hljs-comment">//遍历背包的容量，注意当前节点表示的物体是必选的，因此先处理</span><br>            <span class="hljs-comment">//此时当前节点可看作一个背包组，子节点的每种选择看作是组里的一个物体，所以要大到小遍历</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;=j;k++)&#123;<span class="hljs-comment">//遍历子节点的组合</span><br>                f[u][j]=std::<span class="hljs-built_in">max</span>(f[u][j],f[u][j-k]+f[son][k]);<span class="hljs-comment">//因为前面已经dfs所以默认son的情况已经计算好了</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=v;i&gt;=c[u];i--)f[u][i]=f[u][i-c[u]]+w[u];<span class="hljs-comment">//加上默认选择的当前节点物体u</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;c[u];i++)f[u][i]=<span class="hljs-number">0</span>;<span class="hljs-comment">//对于容量小于当前物体费用的，即放不下的情况，需要置0</span><br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::<span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> f);<br>    std::<span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);<br>    std::cin&gt;&gt;n&gt;&gt;v;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">int</span> p;<br>        std::cin&gt;&gt;c[i]&gt;&gt;w[i]&gt;&gt;p;<br>        <span class="hljs-keyword">if</span>(p==<span class="hljs-number">-1</span>)&#123;root=i;&#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">add</span>(p,i);<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(root);<span class="hljs-comment">//从根节点开始dfs</span><br>    std::cout&lt;&lt;f[root][v]&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    SYP<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>/<em>金明的预算方案</em>/</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">64</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = maxn;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxv = <span class="hljs-number">33333</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span><span class="hljs-comment">//表示物品</span><br>    <span class="hljs-keyword">int</span> v,w;<br>    <span class="hljs-built_in">Node</span>() = <span class="hljs-keyword">default</span>;<br>    <span class="hljs-built_in">Node</span>(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b):<span class="hljs-built_in">v</span>(a),<span class="hljs-built_in">w</span>(b)&#123;&#125;<br>&#125;d[maxn],t[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> from,to;<br>    <span class="hljs-built_in">Edge</span>() = <span class="hljs-keyword">default</span>;<br>    <span class="hljs-built_in">Edge</span>(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b):<span class="hljs-built_in">from</span>(a),<span class="hljs-built_in">to</span>(b)&#123;&#125;<br>&#125;Edges[maxm];<br><span class="hljs-keyword">int</span> head[maxn],nxt[maxm],root[maxn],rp;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> from,<span class="hljs-keyword">int</span> to)</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> tot;<br>    Edges[++tot] = <span class="hljs-built_in">Edge</span>(from,to);<br>    nxt[tot] = head[from];<br>    head[from] = tot;<br>&#125;<br><span class="hljs-keyword">int</span> pre[maxn],f[maxn][maxv],p = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> tp = p;<span class="hljs-comment">//由于后序遍历的性质,一个点的左兄弟显然是进入这个点时序列中的最后一个点</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u];i;i = nxt[i])&#123;<br>        Edge &amp;e = Edges[i];<br>        <span class="hljs-built_in">dfs</span>(e.to);<br>    &#125;<br>    d[++p] = t[u];<span class="hljs-comment">//后序遍历</span><br>    pre[p] = tp;<span class="hljs-comment">//求左兄弟,注意,pre[t]表示序列中编号为t的节点的左兄弟的编号</span><br>&#125;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> LOCAL</span><br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;fafa.in&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,stdin);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;m,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)&#123;<span class="hljs-comment">//建图</span><br>        <span class="hljs-keyword">int</span> v,w,faz;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,&amp;v,&amp;w,&amp;faz);<br>        t[i] = <span class="hljs-built_in">Node</span>(v,v * w);<span class="hljs-comment">//先预处理它的权值</span><br>        <span class="hljs-built_in">addedge</span>(faz,i);<span class="hljs-comment">//有个技巧,如果一个点是主件,我们就认为它依赖于虚拟点0</span><br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)<span class="hljs-comment">//dp求解</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j &lt;= m;j++)<br>            <span class="hljs-keyword">if</span>(j &gt;= d[i].v)f[i][j] = <span class="hljs-built_in">max</span>(f[pre[i]][j],f[i - <span class="hljs-number">1</span>][j - d[i].v] + d[i].w);<br>            <span class="hljs-keyword">else</span> f[i][j] = f[pre[i]][j];<span class="hljs-comment">//转移 </span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,f[n][m]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="其他问法"><a href="#其他问法" class="headerlink" title="其他问法"></a>其他问法</h1><h2 id="求方案总数"><a href="#求方案总数" class="headerlink" title="求方案总数"></a>求方案总数</h2><p>因为状态转移的时候已经把所有方案搜过了,因此可以将max取大改为sum取和，初始条件是f[0,0]=1。即：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">f[i,v]=sum&#123;f[i<span class="hljs-number">-1</span>,v],f[i,v-ci]&#125;<br></code></pre></td></tr></table></figure><h2 id="求最优方案数"><a href="#求最优方案数" class="headerlink" title="求最优方案数"></a>求最优方案数</h2><p>这里的最优方案数指是价值最大的方案总数。</p><p>以01背包为例，对每个物体有两种选择方案，那么当前方案总数即应该加上其中合理的方案，可能会同时合理，因此答案就会增加而不是永1。    由于01背包可以边读边解决，不需要存下来，这里可以把方案数全置1，判断选不选的价值，若相同则可以跟新当前为两者的和，否则继承上一个状态。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STD using namespace std;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> db double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ldb long double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS std::ios::sync_with_stdio(false),std::cin.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 88888888</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> r0 return 0;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SYP system(<span class="hljs-meta-string">&quot;pause&quot;</span>);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1005</span>;<br><span class="hljs-keyword">int</span> n,v,root;<br><span class="hljs-keyword">int</span> f[N],g[N];<br><span class="hljs-keyword">int</span> c[N],w[N];<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cin&gt;&gt;n&gt;&gt;v;<br>    std::<span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> f);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=v;i++)g[i]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> a,b;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        std::cin&gt;&gt;a&gt;&gt;b;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=v;j&gt;=a;j--)&#123;<br>            <span class="hljs-keyword">int</span> t=f[j-a]+b;<br>            <span class="hljs-keyword">if</span>(t&gt;f[j])f[j]=t,g[j]=g[j-a];<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t==f[j])g[j]=(g[j]+g[j-a])%mod;<br>        &#125;<br>    &#125;<br>    std::cout&lt;&lt;g[v]&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="输出字典序最小的最优方案"><a href="#输出字典序最小的最优方案" class="headerlink" title="输出字典序最小的最优方案"></a>输出字典序最小的最优方案</h2><p>把物体遍历的方向改变一下，从n到1遍历，这样子先判断的物体序号更大输出更靠后。</p><p>或者可以将答案存入数组排序后输出，不过时间和空间消耗的都更多。</p><p>或许很朴素的从小到大遍历物体，判断选择情况再输出，这样子可以做到在选与不选价值一样时先选择字典序最小的。</p><p>PS：如果不要求字典序最小，解法当然也知道了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STD using namespace std;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> db double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ldb long double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS std::ios::sync_with_stdio(false),std::cin.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 88888888</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> r0 return 0;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SYP system(<span class="hljs-meta-string">&quot;pause&quot;</span>);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1005</span>;<br><span class="hljs-keyword">int</span> f[N][N],c[N],w[N],g[N][N];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,v;<br>    std::cin&gt;&gt;n&gt;&gt;v;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        std::cin&gt;&gt;c[i]&gt;&gt;w[i];<br>    &#125;<br>    std::<span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=n;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;=v;j++)&#123;<br>            f[i][j]=f[i+<span class="hljs-number">1</span>][j];<br>            <span class="hljs-keyword">if</span>(j&gt;=c[i])&#123;<br>                f[i][j]=std::<span class="hljs-built_in">max</span>(f[i][j],f[i+<span class="hljs-number">1</span>][j-c[i]]+w[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> cnt=v;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(i==n&amp;&amp;cnt&gt;=c[i])&#123;std::cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-comment">//物体选完了记得break</span><br>        <span class="hljs-keyword">if</span>(cnt&lt;=<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<span class="hljs-comment">//装不下了break</span><br>        <span class="hljs-keyword">if</span>(cnt&gt;=c[i]&amp;&amp;f[i][cnt]==f[i+<span class="hljs-number">1</span>][cnt-c[i]]+w[i])&#123;<br>            std::cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;cnt-=c[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    SYP<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="k优解问题"><a href="#k优解问题" class="headerlink" title="k优解问题"></a>k优解问题</h2><p>多了一层维度k，解决方案多加一层维度，即f[i,v]—&gt;f[i,v,1….k]，显然这k个数应该是有序队列。</p><p>状态转移：f[i,v]由f[i-1,v]和f[i-1,v-ci]+wi这<strong>两个有序队列合并</strong>而来，前者即f[i, v,1…..k]，而后者由f[i-1,v-ci,1…k]这个队列每个数加上wi得到。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STD using namespace std;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> db double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ldb long double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS std::ios::sync_with_stdio(false),std::cin.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 88888888</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> r0 return 0;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SYP system(<span class="hljs-meta-string">&quot;pause&quot;</span>);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1005</span>;<br><span class="hljs-keyword">int</span> f[N][<span class="hljs-number">55</span>],c[N],w[N],g[N][N];<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">55</span>],b[<span class="hljs-number">55</span>];<br><span class="hljs-keyword">int</span> d;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,v,k;<br>    std::cin&gt;&gt;n&gt;&gt;v&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        std::cin&gt;&gt;c[i]&gt;&gt;w[i];<br>    &#125;<br>    std::<span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=v;j&gt;=c[i];j--)&#123;<br>            <span class="hljs-keyword">for</span>(d=<span class="hljs-number">1</span>;d&lt;=k;d++)&#123;<br>                a[d]=f[j-c[i]][d]+w[i];<br>                b[d]=f[j][d];<br>            &#125;<br>            a[d]=b[d]=<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">int</span> x=<span class="hljs-number">1</span>,y=<span class="hljs-number">1</span>,z=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(z&lt;=k&amp;&amp;(x&lt;=k||y&lt;=k))&#123;<br>                <span class="hljs-keyword">if</span>(a[x]&gt;b[y])f[j][z]=a[x++];<span class="hljs-comment">//选</span><br>                <span class="hljs-keyword">else</span> f[j][z]=b[y++];<span class="hljs-comment">//不选</span><br>                <span class="hljs-keyword">if</span>(f[j][z]!=f[j][z<span class="hljs-number">-1</span>])z++;<span class="hljs-comment">//更新</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    std::cout&lt;&lt;f[v][k]&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    SYP<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>算法Algorithm</tag>
      
      <tag>DP</tag>
      
      <tag>背包问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CFR715(Div.2)2021.04.16</title>
    <link href="/2021/04/17/Codeforces-Round-715-Div-2-2021-04-16/"/>
    <url>/2021/04/17/Codeforces-Round-715-Div-2-2021-04-16/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-Round-715-Div-2-2021-04-16"><a href="#Codeforces-Round-715-Div-2-2021-04-16" class="headerlink" title="Codeforces Round #715 (Div. 2)2021.04.16"></a><a href="https://codeforces.com/contest/1509">Codeforces Round #715 (Div. 2)2021.04.16</a></h1><p>闲话：这场直接迟到了半小时，不过前两道题切的很快，半小时直接两题，挺舒服。不过c很可惜。我读完题觉得是区间dp，隐约记得寒假见过一道区间dp的题，但是时间不够加上不熟练，没写出来。赛后看了一眼群里讨论发现几乎就板子题，真是太可惜了。不过没关系，借此再熟悉一手（一点点）区间dp。</p><h1 id="A-Average-Height"><a href="#A-Average-Height" class="headerlink" title="A. Average Height"></a><a href="https://codeforces.com/contest/1509/problem/A">A. Average Height</a></h1><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>t组样例，每组给一个n和长为n的序列，要求对其重新排列，使得满足<strong>相邻两项和除以2为整数</strong>这样的数的对数最大化。</p><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>要想满足两项之和除以2为整数，也就是和为偶数，那么它们的奇偶性应该相同，于是就很简单了，把奇数排在一起，偶数排在一起。<br>太签到了，读完题就切。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br><br>#include&lt;iostream&gt;<br>#include&lt;stdio.h&gt;<br>#include&lt;cstring&gt;<br>#include&lt;string&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;vector&gt;<br>#include&lt;math.h&gt;<br>#include&lt;map&gt;<br>#include&lt;sstream&gt;<br><br>#define STD using namespace std;<br>#define ll long long<br>#define db double<br>#define ldb long double<br>#define IOS std::ios::sync_with_stdio(<span class="hljs-literal">false</span>),<span class="hljs-attr">std</span>::cin.tie(<span class="hljs-number">0</span>),<span class="hljs-attr">std</span>::cout.tie(<span class="hljs-number">0</span>);<br>#define MAX <span class="hljs-number">88888888</span><br>#define INF <span class="hljs-number">0x3f</span><br>#define r0 <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>#define SYP system(<span class="hljs-string">&quot;pause&quot;</span>);<br>#define endl <span class="hljs-string">&#x27;\n&#x27;</span><br>int main()<br>&#123;<br>    IOS<br>    int t;std::cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        int n;std::cin&gt;&gt;n;<br>        std::vector&lt;int&gt;x,y;<br>        <span class="hljs-keyword">while</span>(n--)&#123;<br>            int d;std::cin&gt;&gt;d;<br>            <span class="hljs-keyword">if</span>(d%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)x.push_back(d);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)y.push_back(d);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(auto i:x)std::cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">for</span>(auto i:y)std::cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>        std::cout&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//SYP</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="B-TMT-Document"><a href="#B-TMT-Document" class="headerlink" title="B. TMT Document"></a><a href="https://codeforces.com/contest/1509/problem/B">B. TMT Document</a></h1><h2 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h2><p>t组样例，每组给一个n和长为n且只包含‘T’和‘M’的字符串s。将s划分为若干个不相交的子序列且包含该字符串所有的字符，判断是否有某种方案，使每个子序列均为TMT。</p><h2 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h2><p>字符串匹配问题（我觉得是），这里子序列可以跨着分，但是对于每个子序列必须是TMT，那么必须是中间一个M两边各一个T，稍微想一下就发现了，对于每一个M，它的前面和后面都必须有个T和它匹配。那么我们可以从头遍历s，记录对应字符的数量，如果T的数量小于M的数量，那么说明有某个M前面没有T来和它匹配。同样的，再从尾遍历判断每个M后面是否有T和它匹配。<br>最后因为每个字符都要用到，所以数量上应该满足T=2*M。（题目说了n是3的倍数，所以这一点不用判断）<br>依旧是没什么算法的简单思维题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br><br>#include&lt;iostream&gt;<br>#include&lt;stdio.h&gt;<br>#include&lt;cstring&gt;<br>#include&lt;string&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;vector&gt;<br>#include&lt;math.h&gt;<br>#include&lt;map&gt;<br>#include&lt;sstream&gt;<br><br>#define STD using namespace std;<br>#define ll long long<br>#define db double<br>#define ldb long double<br>#define IOS std::ios::sync_with_stdio(<span class="hljs-literal">false</span>),<span class="hljs-attr">std</span>::cin.tie(<span class="hljs-number">0</span>),<span class="hljs-attr">std</span>::cout.tie(<span class="hljs-number">0</span>);<br>#define MAX <span class="hljs-number">88888888</span><br>#define INF <span class="hljs-number">0x3f</span><br>#define r0 <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>#define SYP system(<span class="hljs-string">&quot;pause&quot;</span>);<br>#define endl <span class="hljs-string">&#x27;\n&#x27;</span><br>STD<br>int main()<br>&#123;<br>    IOS<br>    string s;<br>    int t;cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        int len;<br>        cin&gt;&gt;len;<br>        cin&gt;&gt;s;<br>        int m=<span class="hljs-number">0</span>,t=<span class="hljs-number">0</span>;<br>        bool flag=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>            <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;T&#x27;</span>)t++;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;M&#x27;</span>)m++;<br>            <span class="hljs-keyword">if</span>(m&gt;t)&#123;flag=<span class="hljs-number">0</span>;<span class="hljs-keyword">break</span>;&#125;<br>        &#125;<br>        int mm=<span class="hljs-number">0</span>,tt=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(int i=len-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;T&#x27;</span>)tt++;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;M&#x27;</span>)mm++;<br>            <span class="hljs-keyword">if</span>(mm&gt;tt)&#123;flag=<span class="hljs-number">0</span>;<span class="hljs-keyword">break</span>;&#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(t!=<span class="hljs-number">2</span>*m||tt!=<span class="hljs-number">2</span>*mm)flag=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">0</span>)cout&lt;&lt;<span class="hljs-string">&quot;NO\n&quot;</span>;<br>        <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;YES\n&quot;</span>;<br>    &#125;<br>   <span class="hljs-comment">// SYP</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C-The-Sports-Festival"><a href="#C-The-Sports-Festival" class="headerlink" title="C. The Sports Festival"></a><a href="https://codeforces.com/contest/1509/problem/C">C. The Sports Festival</a></h1><h2 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h2><p>给出一个n和长为n的序列a，对其重排列，使d[1]+d[2]+~d[n]最小化。<br>其中d[i]=max(a[1],a[2], ~, a[i])-min(a[1],a[2], ~ a[i])。</p><h2 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h2><p>一道区间dp题。<br>首先要把序列从小到大sort一下。<br>假设现在有：a[1]&lt;=a[2]&lt;=a[3]&lt;=a[4]&lt;=a[5]，n=5；<br>首先我们来解释一下方案的选择：我们先选第一项，假设现在选a[3]，则max=min，d[1]=0；<br>再来选第二项和第三项，我们来对比一下选a[4],a[5]和选a[5],a[4]的情况：<br>1.d[2]+d[3]=(a[4]-a[3])+(a[5]-a[3])=a[3]+a[4]-2* a[3]<br>2.d[2]+d[3]=(a[5]-a[3])+(a[5]-a[3])=2* a[5]-2* a[3]<br>很明显上面是要比下面的小的，所以我们选择的时候依次往旁边推，这样子比跨过一个数要小。<br>更普遍的解释是：要使max-min小，即让max和min尽量相近，那么我们可以在中间选区间然后一次往两边判断加上左边的数还是右边的数作为新区间，且要让最大的和最小的出现在序列的极端，具体实现我们可以dp一下。<br>状态转移方程为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">dp[l][r]=a[r]-a[l]+<span class="hljs-built_in">min</span>(dp[l+<span class="hljs-number">1</span>][r],dp[l][r+<span class="hljs-number">1</span>]);<br><span class="hljs-comment">//区间[l,r]下的d和最小值</span><br></code></pre></td></tr></table></figure><p>我们知道区间dp是把两个区间的信息整合成一个大区间的信息，这里每次只增加一个数，所以是一个区间左边加上一个包含一个数的区间或者右边加上一个包含一个数的区间。<br>假设我们现在已经选择了一个处于中间的区间[l,r]，该区间贡献值为x（小的那个区间），新区间贡献为y（大的那个区间），有以下两种方案：<br>选左边小的：y=x+a[r]-a[l-1]；<br>选右边大的：y=x+a[r+1]-a[l]；<br>比较以下哪种方案小就选择它。然后更新一下继续往下选。<br>上述是大往小递推解释，实现的时候为了方便我们从从小往大的方向记忆化枚举，下面在代码中解释：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STD using namespace std;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> db double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ldb long double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 88888888</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> r0 return 0;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SYP system(<span class="hljs-meta-string">&quot;pause&quot;</span>);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">2021</span>;<br>ll a[N],dp[N][N];<br>STD<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//IOS</span><br>    ll n;cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i];<br>    <span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+n+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">2</span>;i&lt;=n;i++)<span class="hljs-comment">//这里是枚举当前区间的长度，因为长为1的区间只有一个数字，它的贡献为0，所以可以不用枚举</span><br>        <span class="hljs-keyword">for</span>(ll j=<span class="hljs-number">1</span>;j+i<span class="hljs-number">-1</span>&lt;=n;j++)&#123;<span class="hljs-comment">//这里是枚举所有长为i的区间，下面内容对每个区间记忆化dp</span><br>            ll l=j,r=j+i<span class="hljs-number">-1</span>;<span class="hljs-comment">//这样子写方便理解，分别为左右端点</span><br>            dp[l][r]=<span class="hljs-built_in">min</span>(dp[l][r<span class="hljs-number">-1</span>],dp[l+<span class="hljs-number">1</span>][r])+a[r]-a[l];<br>            <span class="hljs-comment">//当前情况转移来的原来两种情况取最小 加上当前情况多出来的贡献</span><br>    &#125;<br>    cout&lt;&lt;dp[<span class="hljs-number">1</span>][n]&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<span class="hljs-comment">//最后答案为区间[1,n]的贡献</span><br>    <span class="hljs-comment">// SYP</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>好了依旧是ABC场，没看的就没必要写了，下次争取切3读4。</p>]]></content>
    
    
    
    <tags>
      
      <tag>codeforces</tag>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>广州大学ACM2021第七周训练2021.04.13</title>
    <link href="/2021/04/16/GZHU2021week7/"/>
    <url>/2021/04/16/GZHU2021week7/</url>
    
    <content type="html"><![CDATA[<h1 id="广州大学ACM第七周训练"><a href="#广州大学ACM第七周训练" class="headerlink" title="广州大学ACM第七周训练"></a>广州大学ACM第七周训练</h1><p>链接：<a href="https://vjudge.net/contest/432974">GZHUACM第七周</a><br>闲话：开始记录的第一场训练赛。这场两点开始，当天补课（高数课旷不得）所以迟到了两个小时，不过前四题很友好，后面的写不了，所以其实也没差。（怎么还押韵了）我要丢掉百度的坏习惯。之前训练没有思路就百度一下题目类型往某个算法或者思维想，并且时不时百度算法模板。在这里提醒下自己，不能白白浪费这么好的机会。<br>那么就开始吧。</p><h1 id="A-1的个数（简单思维-二进制）"><a href="#A-1的个数（简单思维-二进制）" class="headerlink" title="A - 1的个数（简单思维+二进制）"></a>A - 1的个数（简单思维+二进制）</h1><p>原题链接：<a href="https://nanti.jisuanke.com/t/T1179">计蒜客 - T1179</a><br>题意：一个十进制数输出二进制下1的个数。<br>题解：很简单暴力即可，由于二进制末位与奇偶对应，所以可以不断取奇偶和右移遍历每一个二进制位。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br><br>#include&lt;iostream&gt;<br>#include&lt;stdio.h&gt;<br>#include&lt;cstring&gt;<br>#include&lt;string&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;vector&gt;<br>#include&lt;math.h&gt;<br>#include&lt;map&gt;<br>#include&lt;sstream&gt;<br><br>#define STD using namespace std;<br>#define ll long long<br>#define db double<br>#define ldb long double<br>#define IOS std::ios::sync_with_stdio(<span class="hljs-literal">false</span>),<span class="hljs-attr">std</span>::cin.tie(<span class="hljs-number">0</span>),<span class="hljs-attr">std</span>::cout.tie(<span class="hljs-number">0</span>);<br>#define MAX <span class="hljs-number">88888888</span><br>#define INF <span class="hljs-number">0x3f</span><br>#define r0 <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>#define SYP system(<span class="hljs-string">&quot;pause&quot;</span>);<br>#define endl <span class="hljs-string">&#x27;\n&#x27;</span><br><br><br><br>STD<br>int main()<br>&#123;<br>    IOS<br>    ll a;<br>    cin&gt;&gt;a;<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (a)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)ans++;<br>        a&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-comment">//SYP</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="B-实数加法（大浮点数）"><a href="#B-实数加法（大浮点数）" class="headerlink" title="B - 实数加法（大浮点数）"></a>B - 实数加法（大浮点数）</h1><p>原题链接：<a href="https://nanti.jisuanke.com/t/T1180">B - 实数加法</a><br>题意：大浮点数相加，形如：ppppppp.qqqqqqq<br>题解：emmm怎么说呢，大数这玩意说难不难说简单不简单，一个对新手来说考验码力和细节的东西，第一次写是快八个月前了，先后写过好几次，到现在还是不够熟悉。鸿✌说建议学手java或者存个板子，是个好主意。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs javascript">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br><br>#include&lt;iostream&gt;<br>#include&lt;stdio.h&gt;<br>#include&lt;cstring&gt;<br>#include&lt;string&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;vector&gt;<br>#include&lt;math.h&gt;<br>#include&lt;map&gt;<br>#include&lt;sstream&gt;<br><br>#define STD using namespace std;<br>#define ll long long<br>#define db double<br>#define ldb long double<br>#define IOS std::ios::sync_with_stdio(<span class="hljs-literal">false</span>),<span class="hljs-attr">std</span>::cin.tie(<span class="hljs-number">0</span>),<span class="hljs-attr">std</span>::cout.tie(<span class="hljs-number">0</span>);<br>#define MAX <span class="hljs-number">88888888</span><br>#define INF <span class="hljs-number">0x3f</span><br>#define r0 <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>#define SYP system(<span class="hljs-string">&quot;pause&quot;</span>);<br>#define endl <span class="hljs-string">&#x27;\n&#x27;</span><br><br><br>int a[<span class="hljs-number">1111</span>],b[<span class="hljs-number">1111</span>],len;<br>int main()<br>&#123;<br>    IOS<br>    char x;<br>    std::string s1=<span class="hljs-string">&quot;&quot;</span>,s3=<span class="hljs-string">&quot;&quot;</span>,s2=<span class="hljs-string">&quot;&quot;</span>,s4=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">//来存下数字，注意整数部分要倒着存，因为是数组存运算时进位要方便</span><br>    <span class="hljs-comment">//相反，因为相加方向不一样，小数不需要倒着存</span><br>    <span class="hljs-keyword">while</span>(std::cin&gt;&gt;x&amp;&amp;x!=<span class="hljs-string">&#x27;.&#x27;</span>)s1=x+s1;<span class="hljs-comment">//存a整数部分</span><br>    std::cin&gt;&gt;s2;<span class="hljs-comment">//存a小数部分</span><br>    <span class="hljs-keyword">while</span>(std::cin&gt;&gt;x&amp;&amp;x!=<span class="hljs-string">&#x27;.&#x27;</span>)s3=x+s3;<span class="hljs-comment">//存b整数部分</span><br>    std::cin&gt;&gt;s4;<span class="hljs-comment">//存b小数部分</span><br>    <span class="hljs-keyword">if</span>(s1.length()&lt;s3.length())swap(s1,s3);<span class="hljs-comment">//先处理短的</span><br>    <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>;i&lt;s3.length();i++)&#123;<span class="hljs-comment">//遍历短的相同部分相加</span><br>        a[i]+=s1[i]+s3[i]-<span class="hljs-number">2</span>*<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(a[i]&gt;=<span class="hljs-number">10</span>)<span class="hljs-comment">//进位</span><br>        &#123;<br>            a[i+<span class="hljs-number">1</span>]+=a[i]/<span class="hljs-number">10</span>;<br>            a[i]%=<span class="hljs-number">10</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(int i=s3.length();i&lt;s1.length();i++)&#123;<span class="hljs-comment">//长的多出来那一部分</span><br>        a[i]+=s1[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(a[i]&gt;=<span class="hljs-number">10</span>)<br>        &#123;<br>            a[i+<span class="hljs-number">1</span>]+=a[i]/<span class="hljs-number">10</span>;<br>            a[i]%=<span class="hljs-number">10</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(a[s1.length()]) len=s1.length();<span class="hljs-keyword">else</span> len=s1.length()-<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//最后是否进位导致边长了一位</span><br>    <span class="hljs-comment">//注意小数和整数相加的差异（方向相反）</span><br>    <span class="hljs-keyword">if</span>(s2.length()&lt;s4.length())swap(s2,s4);<br>    <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>;i&lt;s4.length();i++) b[i]=s2[i]+s4[i]-<span class="hljs-number">2</span>*<span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">for</span>(int i=s4.length();i&lt;s2.length();i++) b[i]=s2[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">for</span>(int i=s2.length()-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>&amp;&amp;b[i]&gt;=<span class="hljs-number">10</span>)<span class="hljs-comment">//进位到个位去了</span><br>        &#123;<br>            a[<span class="hljs-number">0</span>]++;<br>            b[<span class="hljs-number">0</span>]-=<span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">if</span>(b[i]&gt;=<span class="hljs-number">10</span>)<span class="hljs-comment">//还没进位到个位</span><br>        &#123;<br>            b[i-<span class="hljs-number">1</span>]++;<br>            b[i]-=<span class="hljs-number">10</span>;<br>        &#125;<br>    &#125;<br>    int i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(a[i]&gt;=<span class="hljs-number">10</span>)&#123;<span class="hljs-comment">//小数相加的时候进了位要再处理一次整数进位</span><br>        a[i+<span class="hljs-number">1</span>]++;<br>        a[i]-=<span class="hljs-number">10</span>;<br>        i++;<br>    &#125;<br>    len=std::max(len,i);<span class="hljs-comment">//进位后改变长度</span><br>    <span class="hljs-keyword">for</span>(int j=len;j&gt;=<span class="hljs-number">0</span>;j--)std::cout&lt;&lt;a[j];<span class="hljs-comment">//输出整数部分</span><br>    std::cout&lt;&lt;<span class="hljs-string">&#x27;.&#x27;</span>;<br>    int d=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(int j=s2.length()-<span class="hljs-number">1</span>;j&gt;=<span class="hljs-number">0</span>;j--)<span class="hljs-keyword">if</span>(b[j])&#123;d=j;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-comment">//后往前找到非0，即去掉后导0不输出</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=d;i++)std::cout&lt;&lt;b[i];<span class="hljs-comment">//输出小数部分</span><br>    std::cout&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<span class="hljs-comment">//OVER</span><br>    <span class="hljs-comment">//SYP</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C-幂次方（递归-栈模拟）"><a href="#C-幂次方（递归-栈模拟）" class="headerlink" title="C - 幂次方（递归+栈模拟）"></a>C - 幂次方（递归+栈模拟）</h1><p>原题链接：<a href="https://nanti.jisuanke.com/t/T2103">计蒜客 - T2103 </a><br>题意：用括号的方式把一个非负整数用2的幂次方和表示。<br>题解：这和寒假在紫书上看的括号序列相比难度低了好多（根本比不了）。可以用栈模拟一下，大概就是：<br>1.solve(n)对n先取个log(2)得到temp，然后对内部分情况处理：<br>     ·若temp&gt;2：说明内部还可以再分，先输出此时的2，再solve(temp)<br>     ·若temp==1：说明刚刚好，输出2结束了<br>     ·否则输出按正常输出2(temp)<br>2.然后处理外部：res=n-temp，若res&gt;0说明外部还有，则：<br>输出+再solve(res)处理外部部分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs javascript">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br><br>#include&lt;iostream&gt;<br>#include&lt;stdio.h&gt;<br>#include&lt;cstring&gt;<br>#include&lt;string&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;vector&gt;<br>#include&lt;math.h&gt;<br>#include&lt;map&gt;<br>#include&lt;sstream&gt;<br><br>#define STD using namespace std;<br>#define ll long long<br>#define db double<br>#define ldb long double<br>#define IOS std::ios::sync_with_stdio(<span class="hljs-literal">false</span>),<span class="hljs-attr">std</span>::cin.tie(<span class="hljs-number">0</span>),<span class="hljs-attr">std</span>::cout.tie(<span class="hljs-number">0</span>);<br>#define MAX <span class="hljs-number">88888888</span><br>#define INF <span class="hljs-number">0x3f</span><br>#define r0 <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>#define SYP system(<span class="hljs-string">&quot;pause&quot;</span>);<br>#define endl <span class="hljs-string">&#x27;\n&#x27;</span><br><br><br><br><br><span class="hljs-keyword">const</span> int mod=<span class="hljs-number">10007</span>;<br><span class="hljs-keyword">void</span> solve(ll n)<br>&#123;<br>     int d=<span class="hljs-number">2</span>;<br>     int cnt=<span class="hljs-number">0</span>;<br>     int temp=log(n)/log(<span class="hljs-number">2</span>);<br>     <span class="hljs-keyword">if</span>(temp&gt;<span class="hljs-number">2</span>)&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;2(&quot;</span>;<br>        solve(temp);<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;)&quot;</span>;<br>     &#125;<br>     <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(temp==<span class="hljs-number">1</span>)&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;2&quot;</span>;<br>     &#125;<br>     <span class="hljs-keyword">else</span> &#123;<br>        std::cout&lt;&lt;<span class="hljs-number">2</span>&lt;&lt;<span class="hljs-string">&quot;(&quot;</span>&lt;&lt;temp&lt;&lt;<span class="hljs-string">&quot;)&quot;</span>;<br>     &#125;<br>     int res=n-(int)std::pow(<span class="hljs-number">2</span>,temp);<br>     <span class="hljs-keyword">if</span>(res&gt;<span class="hljs-number">0</span>)&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;+&quot;</span>;<br>        solve(res);<br>     &#125;<br>&#125;<br>int main()<br>&#123;<br>    IOS<br>    ll n;<br>    std::cin&gt;&gt;n;<br>    solve(n);<br>    std::cout&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-comment">//SYP</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="D-新运算（模拟）"><a href="#D-新运算（模拟）" class="headerlink" title="D - 新运算（模拟）"></a>D - 新运算（模拟）</h1><p>原题链接：<a href="https://nanti.jisuanke.com/t/T1765">计蒜客 - T1765 </a><br>题意：定义了三种新运算符。输入一堆数轮流三种运算取模后输出结果。<br>题解：直接模拟即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br><br>#include&lt;iostream&gt;<br>#include&lt;stdio.h&gt;<br>#include&lt;cstring&gt;<br>#include&lt;string&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;vector&gt;<br>#include&lt;math.h&gt;<br>#include&lt;map&gt;<br>#include&lt;sstream&gt;<br><br>#define STD using namespace std;<br>#define ll long long<br>#define db double<br>#define ldb long double<br>#define IOS std::ios::sync_with_stdio(<span class="hljs-literal">false</span>),<span class="hljs-attr">std</span>::cin.tie(<span class="hljs-number">0</span>),<span class="hljs-attr">std</span>::cout.tie(<span class="hljs-number">0</span>);<br>#define MAX <span class="hljs-number">88888888</span><br>#define INF <span class="hljs-number">0x3f</span><br>#define r0 <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>#define SYP system(<span class="hljs-string">&quot;pause&quot;</span>);<br>#define endl <span class="hljs-string">&#x27;\n&#x27;</span><br><br><br><br>STD<br><span class="hljs-keyword">const</span> int mod=<span class="hljs-number">10007</span>;<br>int main()<br>&#123;<br>    IOS<br>    ll n;<br>    cin&gt;&gt;n;<br>    ll cnt=<span class="hljs-number">0</span>;<br>    ll ans=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;ans;<br>    n--;<br>    <span class="hljs-keyword">while</span>(n--)&#123;<br>        ll x;cin&gt;&gt;x;<br>        <span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">0</span>)ans=((ans*ans%mod)+(x*x%mod))%mod;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">1</span>)ans=((ans*ans%mod*ans%mod)%mod+x)%mod;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">2</span>)ans=(ans+(x*x%mod*x%mod)%mod)%mod;<br>        cnt++;<br>        cnt%=<span class="hljs-number">3</span>;<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-comment">//SYP</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>到此为止前四到简单题，下面的都是有点难度的，我只会写E，还是莫名其妙过的。</p><h1 id="E-Subsequence"><a href="#E-Subsequence" class="headerlink" title="E - Subsequence"></a>E - Subsequence</h1><p>原题链接：<a href="https://nanti.jisuanke.com/t/38232">计蒜客 - 38232</a><br>题意：给出一个母串和n个子串，判断子串是否位母串的子串。<br>题解：可以暴力过，也可以两个数组存个位置。<br>师兄题解是这么说的：序列自动机，就是找每个点右边的每个字符的位置。<br>我还不清楚自动机，记得好像写过类似的瞎搞就过了。<br>我的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs javascript">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br><br>#include&lt;iostream&gt;<br>#include&lt;stdio.h&gt;<br>#include&lt;cstring&gt;<br>#include&lt;string&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;vector&gt;<br>#include&lt;math.h&gt;<br>#include&lt;map&gt;<br>#include&lt;sstream&gt;<br><br>#define STD using namespace std;<br>#define ll long long<br>#define db double<br>#define ldb long double<br>#define IOS std::ios::sync_with_stdio(<span class="hljs-literal">false</span>),<span class="hljs-attr">std</span>::cin.tie(<span class="hljs-number">0</span>),<span class="hljs-attr">std</span>::cout.tie(<span class="hljs-number">0</span>);<br>#define MAX <span class="hljs-number">88888888</span><br>#define INF <span class="hljs-number">0x3f</span><br>#define r0 <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>#define SYP system(<span class="hljs-string">&quot;pause&quot;</span>);<br>#define endl <span class="hljs-string">&#x27;\n&#x27;</span><br><br><br><br><span class="hljs-keyword">const</span> int N=<span class="hljs-number">111111</span>;<br>int a[<span class="hljs-number">100</span>];<br>int b[<span class="hljs-number">100</span>];<br>std::vector&lt;int&gt;ans;<br><span class="hljs-keyword">const</span> int mod=<span class="hljs-number">10007</span>;<br>char s[N],c[N];<br>int has[N][<span class="hljs-number">130</span>];<br><span class="hljs-keyword">void</span> pre(int x,int y)<br>&#123;<br>    <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">130</span>; i++)has[x][i]=has[x+<span class="hljs-number">1</span>][i];<br>    has[x][y]=x;<br>&#125;<br>int main()<br>&#123;<br>    IOS<br>    std::cin&gt;&gt;s;<br>    int n;<br>    std::cin&gt;&gt;n;<br>    int len=strlen(s);<br>    memset(has,-<span class="hljs-number">1</span>,sizeof(has));<br>    <span class="hljs-keyword">for</span>(int i=len-<span class="hljs-number">1</span>; i&gt;=<span class="hljs-number">0</span>; i--)<br>    &#123;<br>        int x=(int)s[i];<br>        pre(i,x);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        std::cin&gt;&gt;c;<br>        int temp=strlen(c);<br>        int i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;temp; j++)<br>        &#123;<br>            int x=(int)c[j];<br>            int y=has[i][x];<br>            <span class="hljs-keyword">if</span>(y&lt;i)<span class="hljs-keyword">break</span>;<br>            i=y+<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(j&gt;=temp)std::cout&lt;&lt;<span class="hljs-string">&quot;YES\n&quot;</span>;<br>        <span class="hljs-keyword">else</span> std::cout&lt;&lt;<span class="hljs-string">&quot;NO\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//SYP</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>师兄的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript">#include&lt;bits/stdc++.h&gt;<br>using namespace std;<br>#define ll long long<br>char s[<span class="hljs-number">100010</span>],t[<span class="hljs-number">1010</span>];<br>int nxt[<span class="hljs-number">100010</span>][<span class="hljs-number">26</span>];<br>int <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"></span>)</span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-number">0</span>);<br>    cin.tie(<span class="hljs-number">0</span>);cout.tie(<span class="hljs-number">0</span>);<br>    cin&gt;&gt;s+<span class="hljs-number">1</span>;<br>    int n=strlen(s+<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//建序列自动机</span><br>    <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">26</span>;i++) nxt[n][i]=n+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(int i=n-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        <span class="hljs-keyword">for</span>(int j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">26</span>;j++)<br>         nxt[i][j]=(s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;a&#x27;</span>+j?i+<span class="hljs-number">1</span>:nxt[i+<span class="hljs-number">1</span>][j]);<br>    &#125;<br>    int m;<br>    cin&gt;&gt;m;<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>      cin&gt;&gt;t+<span class="hljs-number">1</span>;<br>      int len=strlen(t+<span class="hljs-number">1</span>);<br>      int i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span>(i&lt;len+<span class="hljs-number">1</span>)&#123;<br>        j=nxt[j][t[i]-<span class="hljs-string">&#x27;a&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(j==n+<span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>        i++;<br>      &#125;<br>      <span class="hljs-keyword">if</span>(i==len+<span class="hljs-number">1</span>) cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>      <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面的暂时不会啦，留着以后补吧。<br>        &gt;_&lt;<br>じゃ、またね</p>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>广州大学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ECFR107(Div.2)2021.04.13</title>
    <link href="/2021/04/16/Educational-Codeforces-Round-107-Rated-for-Div-2/"/>
    <url>/2021/04/16/Educational-Codeforces-Round-107-Rated-for-Div-2/</url>
    
    <content type="html"><![CDATA[<h1 id="Educational-Codeforces-Round-107-Rated-for-Div-2"><a href="#Educational-Codeforces-Round-107-Rated-for-Div-2" class="headerlink" title="Educational Codeforces Round 107 (Rated for Div. 2)"></a>Educational Codeforces Round 107 (Rated for Div. 2)</h1><p>链接：<a href="https://codeforces.com/contest/1511">Educational Codeforces Round 107 (Rated for Div. 2)</a>.<br>闲话：这场打的时候室友在打游戏，加上当时有好几个作业没写，还迟到了十几分钟，心里慌得很想快点切几题去补作业。没想到bc题憋到嘴边出不来，那种要差一点就写出来的感觉可真难受，看到题目想了一会这次还以为能切3题了，没想到还是停在A，依旧是十分钟过A一小时罚坐。所以说再提醒自己一句：<strong>心态很重要！</strong></p><h1 id="A-Review-Site（思维-贪心）"><a href="#A-Review-Site（思维-贪心）" class="headerlink" title="A. Review Site（思维+贪心）"></a>A. Review Site（思维+贪心）</h1><p>链接：<a href="https://codeforces.com/contest/1511/problem/A">A. Review Site</a><br>题意：t组样例，每组样例输入n和n个整数，该整数为1或2或3。<br>题目意思是有两个服务器和n个观众评价电影，每个观众有个代号即上述1~3的整数。当代号：<br>为1时：选择某个服务器，给它点赞。<br>为2时：选择某个服务器，给它点踩。<br>为3时：选择某个服务器，若踩大于赞则点踩，否则点赞。<br>其中服务器的选择由你决定，输出点赞最大值。<br>题解：签到，1和3就能点赞。<br>为什么呢？因为你可以把2都放到一边，1放到另一边，3也放到1这一边，那么3进入时只要有1进入过就能点赞，这样子能使3成为点赞的次数最大。此时能使最多人都点赞。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br> <br>#include&lt;iostream&gt;<br>#include&lt;stdio.h&gt;<br>#include&lt;cstring&gt;<br>#include&lt;string&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;vector&gt;<br>#include&lt;math.h&gt;<br>#include&lt;map&gt;<br>#include&lt;sstream&gt;<br> <br>#define STD using namespace std;<br>#define ll long long<br>#define db double<br>#define ldb long double<br>#define IOS std::ios::sync_with_stdio(<span class="hljs-literal">false</span>),<span class="hljs-attr">std</span>::cin.tie(<span class="hljs-number">0</span>),<span class="hljs-attr">std</span>::cout.tie(<span class="hljs-number">0</span>);<br>#define MAX <span class="hljs-number">88888888</span><br>#define INF <span class="hljs-number">0x3f</span><br>#define r0 <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>#define SYP system(<span class="hljs-string">&quot;pause&quot;</span>);<br>#define endl <span class="hljs-string">&#x27;\n&#x27;</span><br> <br>STD<br>int main()<br>&#123;<br>    <span class="hljs-comment">//IOS</span><br>    ll t,m;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        ll ans = <span class="hljs-number">0</span>;<br>        cin &gt;&gt; m;<br>        <span class="hljs-keyword">while</span>(m--)&#123;<br>            ll n;<br>            cin &gt;&gt; n;<br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span> || n == <span class="hljs-number">3</span>)<br>                ans++;<br>        &#125;<br>        cout &lt;&lt; ans &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-comment">//SYP</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="B-GCD-Length（构造-数学）"><a href="#B-GCD-Length（构造-数学）" class="headerlink" title="B. GCD Length（构造+数学）"></a>B. GCD Length（构造+数学）</h1><p>链接：<a href="https://codeforces.com/contest/1511/problem/B">B. GCD Length</a><br>题意：t组样例，每组输入a，b，c求三个十进制数x，y，z满足：<br>1.x位数为a<br>2.y位数为b<br>3.z位数为c<br>4.gcd(x,y)=z<br>输出x和y。<br>题解：构造题。此题做法有很多，因为答案也有很多种，这里举两种。<br>一种是干脆只用0和1来构造，另一种下面给出。<br>我们知道，要枚举x和y是不可能的，那么我们可以从z出发往x和y构造，又因为gcd(x,y)=z，所以可以确定一下z，假设z=tc=10^(c-1)，那么有x=t<em>tc,y=k</em>tc，我们只要求出t和k就可以了。这里我们重新设下变量t=x,k=y。<br>由于gcd的关系，x和y都应该是质数且x!=y（若x=y则gcd(x,y)=x=y）。<br>那么就好办了，找到x和y的下界，然后判断一下是否为质数，不为质数就+1，并且不能相等。<br>接下来就得解决一下下界寻找的问题了。我们知道10 ^ (a-1)&lt;=x*tc，而tc=10 ^ (c-1)，那么x&gt;=10^(a-c)，下界就是10 ^ (a-c)。问题就迎刃而解啦。<br>下面贴代码吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs javascript">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br><br>#include&lt;iostream&gt;<br>#include&lt;stdio.h&gt;<br>#include&lt;cstring&gt;<br>#include&lt;string&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;vector&gt;<br>#include&lt;math.h&gt;<br>#include&lt;map&gt;<br>#include&lt;sstream&gt;<br><br>#define STD using namespace std;<br>#define ll long long<br>#define db double<br>#define ldb long double<br>#define IOS std::ios::sync_with_stdio(<span class="hljs-literal">false</span>),<span class="hljs-attr">std</span>::cin.tie(<span class="hljs-number">0</span>),<span class="hljs-attr">std</span>::cout.tie(<span class="hljs-number">0</span>);<br>#define MAX <span class="hljs-number">88888888</span><br>#define INF <span class="hljs-number">0x3f</span><br>#define r0 <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>#define SYP system(<span class="hljs-string">&quot;pause&quot;</span>);<br>#define endl <span class="hljs-string">&#x27;\n&#x27;</span><br><br>ll <span class="hljs-function"><span class="hljs-title">qpow</span>(<span class="hljs-params">ll x, ll y</span>)</span> &#123; ll ans = <span class="hljs-number">1</span>; <span class="hljs-keyword">for</span> (; y &gt; <span class="hljs-number">0</span>; y &gt;&gt;= <span class="hljs-number">1</span>) &#123; <span class="hljs-keyword">if</span> (y &amp; <span class="hljs-number">1</span>)ans *= x; x *= x; &#125;<span class="hljs-keyword">return</span> ans; &#125;<br>bool isprime(ll x)<br>&#123;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-number">2</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(x%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>||x&lt;=<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">2</span>;i*i&lt;=x;i++)&#123;<br>        <span class="hljs-keyword">if</span>(x%i==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>int main()<br>&#123;<br>    IOS<br>    int t;std::cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>    int a,b,c;<br>    std::cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>    ll tc=qpow(<span class="hljs-number">10</span>,c-<span class="hljs-number">1</span>);<br>    ll x=qpow(<span class="hljs-number">10</span>,a-c),y=qpow(<span class="hljs-number">10</span>,b-c);<br>    <span class="hljs-keyword">while</span>(!isprime(x))++x;<br>    <span class="hljs-keyword">while</span>(x==y||!isprime(y))++y;<br>    std::cout&lt;&lt;x*tc&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;y*tc&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    SYP<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这题很妙的，比赛的时候因为比较急躁没做出来，后来上英语课的时候分析了一下得出答案来。不得不感慨秒的很啊！。</p><h1 id="C-Yet-Another-Card-Deck"><a href="#C-Yet-Another-Card-Deck" class="headerlink" title="C. Yet Another Card Deck"></a>C. Yet Another Card Deck</h1><p>链接：<a href="https://codeforces.com/contest/1511/problem/C">C. Yet Another Card Deck</a><br>题意：给出一个长为n的序列，进行q次询问，每次询问输入整数m找到最靠前的m，输出它的位置并将它提到序列最前方。<br>样例如下：<br><img src="https://img-blog.csdnimg.cn/20210415195605969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MTg2OQ==,size_16,color_FFFFFF,t_70" alt="样例"><br>题解：这题比赛的时候放着b不管硬怼，结果就到快要出答案的地方过不了。其实也不是很难得题，稍微想一想就出答案得了。<br>这里给出两种解法。</p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>在输入时记录下每个数第一次出现的位置，因为我们知道每次询问会把那个数字提前，那么与它相同且在它后面得数字永远也用不到，所以没必要存下来。在输出答案时直接输出，然后将位置在次数前面的数位置全部加一，之后把该数位置改为1就可以了。很简单，比赛的时候也是这么想的，但是心急出了bug没实现出来。<br>这个解法可行在于输入的数字范围很小，所以可以遍历找出每个数的位置关系然后进行修改，所以说<strong>题目的数据范围很重要</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs javascript">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br><br>#include&lt;iostream&gt;<br>#include&lt;stdio.h&gt;<br>#include&lt;cstring&gt;<br>#include&lt;string&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;vector&gt;<br>#include&lt;math.h&gt;<br>#include&lt;map&gt;<br>#include&lt;sstream&gt;<br><br>#define STD using namespace std;<br>#define ll long long<br>#define db double<br>#define ldb long double<br>#define IOS std::ios::sync_with_stdio(<span class="hljs-literal">false</span>),<span class="hljs-attr">std</span>::cin.tie(<span class="hljs-number">0</span>),<span class="hljs-attr">std</span>::cout.tie(<span class="hljs-number">0</span>);<br>#define MAX <span class="hljs-number">88888888</span><br>#define INF <span class="hljs-number">0x3f</span><br>#define r0 <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>#define SYP system(<span class="hljs-string">&quot;pause&quot;</span>);<br>#define endl <span class="hljs-string">&#x27;\n&#x27;</span><br><br><br><br>int a[<span class="hljs-number">55</span>];<br>int main()<br>&#123;<br>    <span class="hljs-comment">//IOS</span><br>    int n,q;<br>    std::cin&gt;&gt;n&gt;&gt;q;<br>    <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        int x;std::cin&gt;&gt;x;<br>        <span class="hljs-keyword">if</span>(a[x]==<span class="hljs-number">0</span>)a[x]=i;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>        int x;std::cin&gt;&gt;x;std::cout&lt;&lt;a[x]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">50</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(a[i]!=<span class="hljs-number">0</span>&amp;&amp;a[i]&lt;a[x])a[i]++;<br>        &#125;<br>        a[x]=<span class="hljs-number">1</span>;<br>    &#125;<br>    std::cout&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-comment">//SYP</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>在一篇博客上看到的，贴下<a href="https://www.cnblogs.com/2aptx4869/p/14652615.html">原文</a>。<br>原文是这样子讲的：<br><img src="https://img-blog.csdnimg.cn/20210415201202361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MTg2OQ==,size_16,color_FFFFFF,t_70" alt="解"><br>再往下比赛的时候没看，所以就不写啦。<br>开始感受到打cf的快感了，继续加油，先定个小目标，每场切个abc。</p>]]></content>
    
    
    
    <tags>
      
      <tag>codeforces</tag>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CFR714(Div. 2)2021.04.12</title>
    <link href="/2021/04/16/Codeforces-Round-714-Div-2-Editorial-2021-04-12/"/>
    <url>/2021/04/16/Codeforces-Round-714-Div-2-Editorial-2021-04-12/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://codeforces.com/contest/1513">#714(div.2)</a>.<br>开始记录cf的比赛，这是第一场。还不熟悉md格式，凑合写。<br>由于现在菜的很，div123只能过A，不过为了养成好习惯，还是写一 写。<del>（一题也行啊）</del> </p><h1 id="A-Array-and-Peaks（思维-构造）"><a href="#A-Array-and-Peaks（思维-构造）" class="headerlink" title="A. Array and Peaks（思维+构造）"></a>A. Array and Peaks（思维+构造）</h1><p><a href="https://codeforces.com/contest/1513/problem/A">https://codeforces.com/contest/1513/problem/A</a><br>链接: <a href="https://codeforces.com/contest/1513/problem/A">Array and Peaks</a>.<br>题意：给出整数n和k，将数字1~n排除某个序列使之出现k个峰。其中峰指该值比左右值都大。注意峰不能在首尾即前后必须有数字。<br>很简单的思维题。<br>官方题解：<br><img src="https://img-blog.csdnimg.cn/20210412111625366.png" alt="在这里插入图片描述"><br>显然峰值先考虑大到小，每隔一位就放入一个峰值然后将其减1作为下一个峰值。那么当峰值数大于总数的一半即k*2&gt;n将有峰值放不下也就是无解。<br>可以先判断有误解，再输出答案。<br>我当时比赛的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sstream&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STD using namespace std;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> db double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ldb long double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 88888888</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> r0 return 0;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SYP system(<span class="hljs-meta-string">&quot;pause&quot;</span>);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br> <br>STD<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">105</span>;<br><span class="hljs-keyword">int</span> re[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">100</span>;i++)re[i]=i;<br>    <span class="hljs-keyword">int</span> t;cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        <span class="hljs-keyword">int</span> n,k;<br>        cin&gt;&gt;n&gt;&gt;k;<br>        <span class="hljs-keyword">if</span>(k*<span class="hljs-number">2</span>&gt;=n)&#123;cout&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<span class="hljs-keyword">continue</span>;&#125;<br>        <span class="hljs-keyword">int</span> a=<span class="hljs-number">1</span>,b=n-k+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">bool</span> flag=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>||b&gt;n)cout&lt;&lt;a++&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>&amp;&amp;b&lt;=n)cout&lt;&lt;b++&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>        cout&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//SYP</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="B-AND-Sequences（思维-构造-排列组合-AND-amp-与运算）"><a href="#B-AND-Sequences（思维-构造-排列组合-AND-amp-与运算）" class="headerlink" title="B.AND Sequences（思维+构造+排列组合+AND&amp;与运算）"></a>B.AND Sequences（思维+构造+排列组合+AND&amp;与运算）</h1><p>链接: <a href="https://codeforces.com/contest/1513/problem/B">AND Sequences</a>.<br>题意：输入n和n个整数。将n个整数排列，求good permutations的总数对1e9+7取模。<br>good permutations定义为：<img src="https://img-blog.csdnimg.cn/20210412112529758.png" alt="样例"><br>这题比赛的时候想法是记录出现两次以上的数字个数和出现次数，若不存在输出0，否则取两个相同数字作为首尾其它位置排列组合。理由是首尾相同之后一定满足good permutations。<br>最终结果：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sstream&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STD using namespace std;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> db double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ldb long double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 88888888</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> r0 return 0;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SYP system(<span class="hljs-meta-string">&quot;pause&quot;</span>);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br> <br>STD<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">2e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> a[maxn];<br>ll pre[maxn];<br><span class="hljs-keyword">int</span> yes[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    pre[<span class="hljs-number">1</span>]=pre[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;maxn;i++)&#123;<br>        pre[i]=((i%mod)*(pre[i<span class="hljs-number">-1</span>]%mod))%mod;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-keyword">int</span> t;cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        <span class="hljs-keyword">int</span> n;cin&gt;&gt;n;<br>        <span class="hljs-built_in">memset</span>(yes,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> yes);<br>        vector&lt;<span class="hljs-keyword">int</span>&gt;ans;<br>        <span class="hljs-keyword">int</span> ma=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> can=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            cin&gt;&gt;a[i];<br>            yes[a[i]]++;<br>            <span class="hljs-keyword">if</span>(yes[a[i]]==<span class="hljs-number">2</span>)ans.<span class="hljs-built_in">push_back</span>(a[i]),can++;<br>        &#125;<br> <br>        <span class="hljs-comment">//cout&lt;&lt;&quot;debug:&quot;&lt;&lt;can&lt;&lt;&#x27;\n&#x27;;</span><br>        <span class="hljs-comment">//cout&lt;&lt;&quot;debug:&quot;&lt;&lt;pre[1]&lt;&lt;&#x27; &#x27;&lt;&lt;pre[2]&lt;&lt;&#x27; &#x27;&lt;&lt;pre[3]&lt;&lt;&#x27;\n&#x27;;</span><br> <br>        <span class="hljs-keyword">if</span>(can==<span class="hljs-number">0</span>)&#123;cout&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<span class="hljs-keyword">continue</span>;&#125;<br>        ll res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;can;i++)&#123;<br>            ll p=(yes[ans[i]]%mod*(yes[ans[i]]<span class="hljs-number">-1</span>)%mod)%mod*pre[n<span class="hljs-number">-2</span>]%mod;<br>            <span class="hljs-comment">//cout&lt;&lt;&quot;debug:&quot;&lt;&lt;p&lt;&lt;&#x27;\n&#x27;;</span><br>            res+=p;<br>            res%=mod;<br>        &#125;<br>        cout&lt;&lt;res&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//SYP</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果是wa了，只能过样例点。<br>分析一下为什么wa了：这里很显然a[1]=a[n]是一个<strong>必要条件</strong>，但事实上它<strong>并不是一个充分条件</strong>。因为除了a[1]=a[n]外还要满足a[1]&amp;x=a[n]&amp;x，x=a[2]&amp;a[3]~a[n-1]。<br>来看看官方题解：<br><img src="https://img-blog.csdnimg.cn/20210412113020714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MTg2OQ==,size_16,color_FFFFFF,t_70" alt="官方题解"></p><p>首先解释一下官方题解的意思。<br>pref(i)=a[1]&amp;a[2]&amp; ~ a[i]，<br>suf(i)=a[i]&amp;a[i+1]&amp; ~ a[n]，<br>我们知道几个数相&amp;只会使结果越来越小，所以pref(2)&lt;=pref(1)=suf(2)&lt;=suf(3)，又由题有pref(1)=suf(3)，所以得出：a[1]=pref(2)=suf(3)。<br>从而对1&lt;=i&lt;=n有pref(i)=a[i]&amp;&amp;suf[i]=a[1]。<br>我这里做出自己的另一种理解：<br>有上述可知，若将中间看作整体，有a[1]&amp;x=a[n]，a[1]=x&amp;a[n]，a[1]=a[n]，那么我们可以再把后两项或前两项看作整体，成为一个n-1项的序列，且我们同样可以得出以上结论，即首尾相等且等于首尾分别与中间&amp;的结果，当我们继续往下推可以得到：a[1]=a[1]&amp;a[2]=a[2]&amp;F(a[3]&amp; ~ a[n])，<br>把左右两边&amp;a[1]得到a[1]&amp;a[1]=a[1]&amp;a[2]&amp;F(a[3]&amp;~a[n])，<br>那么a[1]=a[1]&amp; ~ a[n]的结论就得出来了。<br>也就是说要找的首尾应该是相等的且等于所有数&amp;的结果。<br>那么下面就可以来实现了：<br>首先mp记录每个数出现次数，p=a[1]&amp;a[2]~~a[n]，mul=(n-2)!。<br>其中p为放置在首尾的数，mul为中间数字的全排列。<br>若mp[p]&lt;=2说明没有合题意能放在首尾的数即无解输出0，<br>否则 ans=mp[p]* （mp[p]-1）* mul。<br>前两项相乘表示所有合适的数选出来两个排列在首尾的方案数和，即c(2,cnt)。<br>记得边乘边取模。<br>赛后补题：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STD using namespace std;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> db double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ldb long double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 88888888</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> r0 return 0;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SYP system(<span class="hljs-meta-string">&quot;pause&quot;</span>);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><br>STD<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">2e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br>ll a[maxn];<br>map&lt;ll,ll&gt;mp;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t;cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        mp.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">int</span> n;cin&gt;&gt;n;<br>        ll p,mul=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            cin&gt;&gt;a[i];<br>            mp[a[i]]++;<br>            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)p=a[i];<br>            <span class="hljs-keyword">else</span> p&amp;=a[i];<br>            <span class="hljs-keyword">if</span>(i&lt;=n<span class="hljs-number">-2</span>)mul=(mul*i)%mod;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(mp[p]&gt;=<span class="hljs-number">2</span>)&#123;<br>            ll ans=(mp[p]*(mp[p]<span class="hljs-number">-1</span>))%mod;<br>            cout&lt;&lt;ans*mul%mod&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//SYP</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C-Add-One（dp-矩阵）"><a href="#C-Add-One（dp-矩阵）" class="headerlink" title="C.Add One（dp+矩阵）"></a>C.Add One（dp+矩阵）</h1><p><a href="https://codeforces.com/contest/1513/problem/C">https://codeforces.com/contest/1513/problem/C</a><br>链接：<a href="https://codeforces.com/contest/1513/problem/C">Add One</a><br>题意：t组样例，每组给出两个整数n，m。对n操作m次输出最终n的长度对1e9+7取模。<br>操作指：n每一个十进制位的数字加1。eg：1912–&gt;21023。<br>这题比赛时来不及想，不过大概率也做不出来。<br>还是先上官方题解：<br><img src="https://img-blog.csdnimg.cn/20210412125428215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MTg2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>考虑一位数如何加1会变成两位数。<br>对于n=10，操作k次，设dp[i]==操作i次后n长度：<br>0&lt;=k&lt;=8：dp[k]==2;<br>k=9:   dp[k]==3;<br>k&gt;=10:  dp[k]=dp[k-9]+dp[k-10]<br>那么我们可以先预处理一下。<br>最后结果就是：<br><img src="https://img-blog.csdnimg.cn/20210412130303495.png" alt="在这里插入图片描述"><br>也就是遍历每一位数设为x，若m+x&lt;10 ans+=1；否则ans+=dp[m+x-10]。<br>记得取模。数据很多所以得IOS关同步。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++">        <span class="hljs-comment">// violet apricity</span><br><span class="hljs-comment">// Do all I can do.Do good to be good.</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STD using namespace std;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> db double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ldb long double</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 88888888</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> r0 return 0;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SYP system(<span class="hljs-meta-string">&quot;pause&quot;</span>);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><br>STD<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">2e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> dp[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IOS<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9</span>;i++)dp[i]=<span class="hljs-number">2</span>;<br>    dp[<span class="hljs-number">9</span>]=<span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">10</span>;i&lt;maxn;i++)dp[i]=(dp[i<span class="hljs-number">-9</span>]+dp[i<span class="hljs-number">-10</span>])%mod;<br>    <span class="hljs-keyword">int</span> t;cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        <span class="hljs-keyword">int</span> n,m;<br>        cin&gt;&gt;n&gt;&gt;m;<br>        <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(n)&#123;<br>            <span class="hljs-keyword">int</span> x=n%<span class="hljs-number">10</span>;<br>            ans+=((x+m&lt;<span class="hljs-number">10</span>)?<span class="hljs-number">1</span>:dp[x+m<span class="hljs-number">-10</span>]);<br>            ans%=mod;n/=<span class="hljs-number">10</span>;<br>        &#125;<br>        cout&lt;&lt;ans&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    SYP<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么就到这了，再往下DEF不会了。</p><p>√落幕&gt;-&lt;</p>]]></content>
    
    
    
    <tags>
      
      <tag>codeforces</tag>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何使用Hexo搭建一个自己的静态博客</title>
    <link href="/2021/04/14/How-to-creat-a-blog-using-hexo/"/>
    <url>/2021/04/14/How-to-creat-a-blog-using-hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="如何使用Hexo搭建一个静态博客"><a href="#如何使用Hexo搭建一个静态博客" class="headerlink" title="如何使用Hexo搭建一个静态博客"></a>如何使用Hexo搭建一个静态博客</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>hexo官网在这里：<a href="https://hexo.io/zh-cn/">hexo</a></p><p>hexo是一款简洁快速的博客框架，可以使用Makedown（或其他渲染引擎）解析文章。</p><p>大一下，为了记录技术文章和刷题补题记录（还有其它乱七八糟的东西），我出生了搭建博客的想法，由于对各大博客框架不了解，选择了一位本校师兄推荐的hexo，在这里记录一下博客搭建的过程和遇到的一些问题。写此博客时参考了其它博客和视频，将会在文章末尾列出。</p><p>本博客使用<strong>hexo框架</strong>，通过Git Pages服务部署在了<strong>github/gitee</strong>上，本人使用的是windows系统，不同系统差异应该也不大。（并不清楚）</p><h2 id="安装前提："><a href="#安装前提：" class="headerlink" title="安装前提："></a>安装前提：</h2><p>需要以下两款程序：</p><p><a href="https://nodejs.org/en/">Node.js</a></p><p><a href="http://git-scm.com/">Git</a></p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a><a href="http://git-scm.com/">Git</a></h3><h4 id="安装注意事项："><a href="#安装注意事项：" class="headerlink" title="安装注意事项："></a>安装注意事项：</h4><p>（以下大部分为某位师兄的博客总结，由于写的很好并且个人不是很懂这些，当初也是他教我的，所以授权后引用了。）</p><p>跟Node.js一样，git也是直接去<a href="https://git-scm.com/">官网</a>下载对应的64位或32位安装包双击即可。git在安装过程中的选项比较多，这里说一下每个选项大概的意思。</p><p><img src="https://luhawxem.gitee.io/2021/01/22/MyFirstBlogArticle/GitSetup_1.png" alt="img"></p><p>这里的选项基本上不用动，用默认就行。</p><p><img src="https://luhawxem.gitee.io/2021/01/22/MyFirstBlogArticle/GitSetup_2.png" alt="img"></p><p>这里是选择<code>.git</code>文件的默认编辑器，推荐<code>Nano</code>、<code>Vim</code>，个人喜欢用VSCode。</p><p><img src="https://luhawxem.gitee.io/2021/01/22/MyFirstBlogArticle/GitSetup_3.png" alt="img"></p><p>设置初始化时的主分支名，一般用默认。</p><p><img src="https://luhawxem.gitee.io/2021/01/22/MyFirstBlogArticle/GitSetup_4.png" alt="img"></p><p>这里是选择将哪些工具添加到系统的环境变量<code>PATH</code>中。第一个是全部不添加，只能在Git Bash中使用git命令。第二个是仅添加git，不添加git附带的命令行工具(如<code>Nano</code>、<code>Vim</code>这些)。第三个则是将全部工具添加到环境变量中。</p><p><img src="https://luhawxem.gitee.io/2021/01/22/MyFirstBlogArticle/GitSetup_5.png" alt="img"></p><p>选择TLS库。第一个选择的是git自带的TLS库，第二个选的是Windows自带的TLS库。这两个库的差别主要在根证书上，选OpenSSL会使用Git带的根证书，选后者会用系统的根证书。</p><p><img src="https://luhawxem.gitee.io/2021/01/22/MyFirstBlogArticle/GitSetup_6.png" alt="img"></p><p>选择是否自动转换仓库中文件的换行符，此处选择中间项，提交时会自动转化成LF。有关LF、CR、CRLF可以自行百度。</p><p><img src="https://luhawxem.gitee.io/2021/01/22/MyFirstBlogArticle/GitSetup_7.png" alt="img"></p><p>选择Git Bash使用什么终端，建议选MinTTY。</p><p><img src="https://luhawxem.gitee.io/2021/01/22/MyFirstBlogArticle/GitSetup_8.png" alt="img"></p><p>选择<code>git pull</code>命令的默认行为。选第一个或者最后一个，在实际使用中最好避免使用<code>git pull</code>改为手动<code>git fetch</code>然后再<code>git merge</code>，具体命令的作用可以直接百度或者参见<a href="https://www.runoob.com/git/git-tutorial.html">菜鸟教程</a>。</p><p><img src="https://luhawxem.gitee.io/2021/01/22/MyFirstBlogArticle/GitSetup_9.png" alt="img"></p><p>选择git的凭据管理器(类似浏览器的密码管理器)，个人选择第一个。如果没有这个功能，每次提交都需要手动输入密码，git本身没有凭据储存的功能。</p><p><img src="https://luhawxem.gitee.io/2021/01/22/MyFirstBlogArticle/GitSetup_10.png" alt="img"></p><p>缓存和符号链接文件相关。</p><p><img src="https://luhawxem.gitee.io/2021/01/22/MyFirstBlogArticle/GitSetup_11.png" alt="img"></p><p>是否允许在Git Bash中使用Python或NodeJs等外部命令。</p><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a><a href="https://nodejs.org/en/">Node.js</a></h3><p>Node.js 为大多数平台提供了官方的 <a href="https://nodejs.org/en/download/">安装程序</a>。对于中国大陆地区用户，可以前往 <a href="https://npm.taobao.org/mirrors/node">淘宝 Node.js 镜像</a> 下载。</p><p>其它的安装方法：</p><ul><li>Windows：通过 <a href="https://github.com/jasongin/nvs/">nvs</a>（推荐）或者<a href="https://github.com/nvm-sh/nvm">nvm</a> 安装。</li><li>Mac：使用 <a href="https://brew.sh/">Homebrew</a> 或 <a href="http://www.macports.org/">MacPorts</a> 安装。</li><li>Linux（DEB/RPM-based）：从 <a href="https://github.com/nodesource/distributions">NodeSource</a> 安装。</li><li>其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 <a href="https://nodejs.org/en/download/package-manager/">指导</a></li></ul><p>对于 Mac 和 Linux 同样建议使用 nvs 或者 nvm，以避免可能会出现的权限问题。</p><h4 id="配置环境变量："><a href="#配置环境变量：" class="headerlink" title="配置环境变量："></a>配置环境变量：</h4><p>对于环境变量和path相关知识可以参考百度或者<a href="https://blog.csdn.net/Pre_waist_L/article/details/79696507">这篇博客。</a></p><p>下面说说配置步骤：</p><ul><li><p>右击<strong>我的电脑</strong>，打开<strong>高级系统设置</strong>。</p><img src="/2021/04/14/How-to-creat-a-blog-using-hexo/image1.jpg" class=""></li></ul><ul><li><p>打开<strong>环境变量</strong>，在<strong>path</strong>下<strong>编辑</strong>。</p><img src="/2021/04/14/How-to-creat-a-blog-using-hexo/image2.jpg" class=""></li><li><p>选择<strong>新建</strong>，加入Node.js安装时的路径。</p><img src="/2021/04/14/How-to-creat-a-blog-using-hexo/image3.jpg" class=""></li></ul><h4 id="可选操作"><a href="#可选操作" class="headerlink" title="可选操作:"></a>可选操作:</h4><ul><li><p>由于由于Node.js自带的包管理器<code>npm</code>在进行全局安装时会默认安装到C盘，为了减轻C盘的存储空间负担可以将全局安装文件夹的默认路径修改到其他盘符。在管理员模式的cmd窗口下(按win键直接敲cmd搜索或者win键+R输入cmd)执行：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">#这里我将默认路径改到我的Node.js的安装路径下,也可以选择直接安装到D盘根路径下等等<br>npm config set prefix <span class="hljs-string">&quot;D:\NodeJS\node_global&quot;</span> <br>npm config set cache <span class="hljs-string">&quot;D:\NodeJS\node_cache&quot;</span><br></code></pre></td></tr></table></figure></li></ul><p>​       执行完成后，再去系统属性中配置一下环境变量。将<code>D:\NodeJS\node_global</code>    添加到<code>Path</code>中。</p><ul><li><p>由于国内直接使用<code>npm</code>的官方镜像比较慢，所以一般我们安装完<code>Node.js</code>之后都会配置一个淘宝的<code>cnpm</code>镜像源用来代替<code>npm</code>官方的镜像源。淘宝这个镜像源更新还是比较快的，一般不会出现版本不一样的问题。直接在cmd窗口中执行：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">npm install -g cnpm --registry=https:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure></li></ul><p>​      完成之后就可以通过<code>cnpm install</code>来安装模块了，速度会快很多。</p><h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><p><strong>Windows 用户</strong></p><ul><li>使用 Node.js 官方安装程序时，请确保勾选 <strong>Add to PATH</strong> 选项（默认已勾选）</li></ul><p><strong>For Mac / Linux 用户</strong></p><ul><li>如果在尝试安装 Hexo 的过程中出现 <code>EACCES</code> 权限错误，请遵循 <a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally">由 npmjs 发布的指导</a> 修复该问题。强烈建议 <strong>不要</strong> 使用 root、sudo 等方法覆盖权限</li></ul><p><strong>Linux</strong></p><ul><li>If you installed Node.js using Snap, you may need to manually run <code>npm install</code> in the target folder when <a href="https://hexo.io/docs/commands#init">initializing</a> a blog.</li></ul><h3 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h3><p>注册好一个<a href="https://github.com/">github</a>或<a href="https://gitee.com/">gitee</a>的账号，之后打开Git Bash终端对git账号绑定（配置）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">#配置用户名，此处<span class="hljs-string">&quot;username&quot;</span>是自己的账户名<br>git config --global user.name <span class="hljs-string">&quot;username&quot;</span><br>#配置邮箱，<span class="hljs-string">&quot;username@email.com&quot;</span>是注册时所用的邮箱，<br>git config --global user.email <span class="hljs-string">&quot;username@email.com&quot;</span><br>#执行完成后可用以下命令查看配置<br>git config --global --list<br></code></pre></td></tr></table></figure><p>之后可以选择生成SSH公钥，输入：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">ssh-keygen -t rsa<br></code></pre></td></tr></table></figure><p>之后三次回车默认选项yes。之后去<code>C:\Users\用户名\.ssh</code>文件夹中将<code>id_rsa.pub</code>文件中的内容复制出来。去github或者gitee的设置中找到SSH这一项，将复制的内容粘贴到Key中保存配置。这里是设置与git仓库以SSH的方式通信，只能在你是仓库所有人的情况下才能使用，在参与多人协作时非仓库所有者仅能通过HTTPS方式进行通信。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>hexo框架的安装同NodeJs及其包管理器npm与镜像源cnpm，可以通过Windows自带的cmd或者git所带的Git Bash执行以下命令全局安装hexo框架：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">cnpm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>安装完成之后，我们就可以在本地生成自己的博客了。新建一个文件夹如myblog，进去之后右键在此处打开Git Bash。</p><ul><li><code>hexo init</code>：初始化一个博客。</li><li><code>hexo server</code>：在本地(localhost:4000)启动当前博客。</li><li><code>hexo new &quot;文章标题&quot;</code>：创建一篇新文章(markdown格式)</li><li><code>hexo clean</code>：清除生成的临时文件</li><li><code>hexo generate</code>：重新生成(每次对博客进行改动都需要清除之后再重新生成)</li></ul><p>这样，一个hexo博客就已经搭建完成了，但是博客不可能只是在本地使用，所以这里使用github或者gitee的git page项目来部署我们的博客。在此之前需要安装一个自动将hexo博客部署到git上的工具。执行命令<code>cnpm install --save hexo-deployer-git</code>安装。</p><p>之后在github或者gitee中新建一个仓库，仓库名为**<a href="http://github用户名.github.io/">github用户名.github.io</a>**，gitee则是直接以用户名为仓库名和仓库路径。这个仓库名不能随便起，只能按照这个要求，否则无法直接通过<code>https://github用户名.github.io</code>访问到博客页面(gitee的仓库路径需要手动改成用户名，否则则会以分级目录访问，同时gitee仓库需要在服务中手动开启Git Page服务，且每次提交后需要手动重新部署)。</p><p>创建完成后将SSH中的链接复制一下，打开你的博客根文件夹下的_config.yml文件。在最底部找到这一段，填入对应的参数即可，注意<strong>冒号之后均有空格且不可省略</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"># Deployment<br>## Docs: https:<span class="hljs-comment">//hexo.io/docs/deployment.html</span><br>deploy:<br>  type: git #填入git<br>  repo: 刚刚复制的链接 #填入仓库链接<br>  branch: master #这个可以不填，git仓库默认也是master<br></code></pre></td></tr></table></figure><p>保存退出后我们可以直接通过<code>hexo deploy</code>命令将生成的静态文件部署到git仓库，之后就可以通过<code>https://github用户名.github.io</code>直接访问我们的个人博客了。部署在github上的话可能国内连接速度有点慢，gitee会好很多。</p><h2 id="参考资料及后话："><a href="#参考资料及后话：" class="headerlink" title="参考资料及后话："></a>参考资料及后话：</h2><p>在这里感谢一下一位师兄，搭建的时候手把手教了我，并且有问题我马上找他，他也有求必应。因此，这篇博客大部分也是参考他的，这里贴一下他的原博客。</p><p><a href="https://www.luhawxem.com:4000/2021/01/22/MyFirstBlogArticle/"><a href="https://luhawxem.gitee.io/">BBSD丿草丶帽</a></a></p><p><a href="https://www.bilibili.com/video/BV1Yb411a7ty">CodeSheep的hexo博客搭建教程视频bilibili</a></p><p><a href="https://hexo.io/zh-cn/docs/">hexo官方文档</a></p><p>  √落幕  &gt;-&lt;</p>]]></content>
    
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/04/10/hello-world/"/>
    <url>/2021/04/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
